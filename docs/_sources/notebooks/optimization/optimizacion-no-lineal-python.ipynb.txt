{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "Optimización de funciones no lineales\n",
    "===\n",
    "\n",
    "* *30 min* | Última modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Encuentre el punto de máxima de la función:\n",
    "\n",
    "$$f(x, y) = 36 - (x^2 - 1.8)^2 - (y + 0.9)^2$$\n",
    "\n",
    "Sujeto a: \n",
    "\n",
    "* $x$ y $y$ deben ser enteros.\n",
    "\n",
    "* $-4 \\le x, y \\le 5$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x, y):\n",
    "    return 36 - (x**2 - 1.8)**2 + (y + 0.9)**2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El problema anterior no puede ser resuelto directamente usando técnicas basadas en gradiente debido a que la solución solo puede ser encontrada en un espacio restringido y a que las variables independientes solo pueden tomar valores enteros."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metodología y solución"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Definición del problema general de optimización"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El problema general de optimización esta compuesto por una función objetivo que se desea maximizar o minimizar:\n",
    "\n",
    "$$\\text{min} f(\\mathbf{x})$$\n",
    "\n",
    "El espacio donde se encuentra el punto óptimo está determinado por un conjunto de restricciones de diferentes tipos:\n",
    "\n",
    "\n",
    "* Desigualdades lineales:\n",
    "\n",
    "$$\\mathbf{Ax} \\le \\mathbf{b}$$\n",
    "\n",
    "\n",
    "* Igualdades lineales:\n",
    "\n",
    "$$\\mathbf{Cx} = \\mathbf{d}$$\n",
    "\n",
    "\n",
    "* Límites en el valor de las variables independientes:\n",
    "\n",
    "$$ \\mathbf{x}_L \\le \\mathbf{x} \\le \\mathbf{x}_U$$\n",
    "\n",
    "\n",
    "* Desigualdades no lineales:\n",
    "\n",
    "$$ G(\\mathbf{x}) \\le 0$$\n",
    "\n",
    "\n",
    "* Igualdades no lineales:\n",
    "\n",
    "$$ H(\\mathbf{x}) \\le 0$$\n",
    "\n",
    "\n",
    "* Restricciones en el tipo de las variables independientes: $x$ puede ser real o estar restringido a los enteros.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tipología de funciones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La función objetivo puede ser clasificada de acuerdo con la variación del gradiente de un punto a otro:\n",
    "\n",
    "* Plana.\n",
    "\n",
    "\n",
    "* Suave.\n",
    "\n",
    "\n",
    "* Rugosa.\n",
    "\n",
    "\n",
    "Respecto a la cantidad de mínimos\n",
    "\n",
    "* Un único mínimo (global).\n",
    "\n",
    "\n",
    "* Varios mínimos locales.\n",
    "\n",
    "\n",
    "* Muchos mínimos locales.\n",
    "\n",
    "\n",
    "![assets/OptimNoLineal-06.png](assets/OptimNoLineal-06.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clasificación del problema de optimización\n",
    "\n",
    "* Por tipo de problema: Sin restricciónes vs con restricciiones.\n",
    "  \n",
    "  \n",
    "* Por tipo de función objetivo: Lineal vs No lineal.\n",
    "\n",
    "\n",
    "* Por número de objetivos: Escalar vs Vectorial o multiobjetivo.\n",
    "\n",
    "\n",
    "* Por tipo de restricciones: Lineal vs No lineal.\n",
    "\n",
    "\n",
    "* Por tipo de variables: Continuas vs Discretas."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tipos de puntos de mínima\n",
    "\n",
    "**Mínimo fuerte**: El punto $\\mathbf{x}^*$ es un mínimo fuerte de $f(\\mathbf{x})$, si existe un escalar $\\delta > 0$, tal que  $f(\\mathbf{x}^*) < f(\\mathbf{x}^* + \\Delta\\mathbf{x})$, para todo $\\delta > || \\Delta \\mathbf{x} || > 0$; es decir, la función siempre crece en la vecindad del mínimo.\n",
    "\n",
    "**Mínimo global**: El punto $\\mathbf{x}^*$ es un mínimo global único de $f(\\mathbf{x})$, si $f(\\mathbf{x}^*) < f(\\mathbf{x}^* + \\Delta\\mathbf{x})$, para todo $\\Delta \\mathbf{x} \\ne 0$. La función $f(x,y)=x^2 + 2y^2$ tiene un mínimo global único.\n",
    "\n",
    "![assets/OptimNoLineal-01.png](assets/OptimNoLineal-01.png)\n",
    "\n",
    "**Mínimo débil**: El punto $\\mathbf{x}^*$ es un mínimo debil de $f(\\mathbf{x})$, si $\\mathbf{x}^*$ no es un mínimo fuerte, y existe un escalar $\\delta > 0$, tal que  $f(\\mathbf{x}^*) \\le f(\\mathbf{x}^* + \\Delta\\mathbf{x})$, para todo $\\delta > || \\Delta \\mathbf{x} || > 0$; es decir, la función siempre crece en la vecindad del mínimo o no cambia de valor. La función $f(x, y) = x^2(x^2 - 1.5 xy + 2y^2)$ tiene un punto de mínima local débil (todos los puntos sobre la línea $x=0$).\n",
    "\n",
    "![assets/OptimNoLineal-03.png](assets/OptimNoLineal-03.png)\n",
    "\n",
    "La siguiente función presenta un valle estacionario.\n",
    "\n",
    "![assets/OptimNoLineal-05.png](assets/OptimNoLineal-05.png)\n",
    "\n",
    "**Punto de silla**: en una dirección es un mínimo, mientras que en la ortogonal es un máximo. La siguiente función tiene un punto de silla\n",
    "\n",
    "![assets/OptimNoLineal-04.png](assets/OptimNoLineal-04.png)\n",
    "\n",
    "La siguiente función tiene dos puntos de mínima y un punto de silla \n",
    "\n",
    "![assets/OptimNoLineal-02.png](assets/OptimNoLineal-02.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Formulación de penalizaciones\n",
    "\n",
    "Un problema de optimización con restricciones puede convertirse en un problema no restringido formulando una nueva función objetivo penalizada. Las transformaciones son las siguientes:\n",
    "\n",
    "* Restricción de borde en $a$: \n",
    "\n",
    "$$x \\ge a \\to R(x)=|x-a| + (a - x)$$\n",
    "\n",
    "\n",
    "* Restricción de igualdad:\n",
    "\n",
    "$$g(x) = a \\to R(x)=|g(x)-a|$$\n",
    "\n",
    "\n",
    "* Restricción de entero: \n",
    "\n",
    "$$R(x) = [\\sin(\\pi x)]^4 $$\n",
    "\n",
    "\n",
    "De esta forma, la función objetivo se reescribe como:\n",
    "\n",
    "$$ F(\\mathbf{x}) = f(\\mathbf{x}) + \\sum_{i=1}^m \\delta_i R_i(\\mathbf{x})$$\n",
    "\n",
    "donde se puede hacer $\\delta_1 = \\cdot \\cdot \\cdot = \\delta_m = \\delta$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reformulación del problema propuesto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el problema propuesto, se pide maximizar la función\n",
    "\n",
    "$$f(x, y) = 36 - (x^2 - 1.8)^2 - (y + 0.9)^2$$\n",
    "\n",
    "Este es equivalente a minimizar la función\n",
    "\n",
    "$$f^*(x, y) = - f(x, y) = - 36 + (x^2 - 1.8)^2 + (y + 0.9)^2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La restricción $x$ y $y$ enteros se puede formular como:\n",
    "\n",
    "$$R_1(x, y)=[\\sin(\\pi x)]^4 + [\\sin(\\pi y)]^4$$\n",
    "\n",
    "Mientras que la restricción $-4 \\le x, y \\le 5$ es equivalente a:\n",
    "\n",
    "$$R_2(x, y)= \n",
    "\\left\\{ \n",
    " \\begin{array}{ll}\n",
    "   |x + 4| + (-4 - x)   & \\text{, para $x \\ge -4$}\\\\ \n",
    "   + \\quad |y + 4| + (-4 - y) & \\text{, para $y \\ge -4$}\\\\\n",
    "   + \\quad |x - 5| - (5 - x)  & \\text{, para $x \\le +5$}\\\\ \n",
    "   + \\quad |y - 5| - (5 - y)  & \\text{, para $y \\le +5$}\\\\ \n",
    " \\end{array}\n",
    "\\right.\n",
    "$$ \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def F(x, y, delta):\n",
    "    fxy = -f(x, y) ## función original\n",
    "    R1 = (abs(math.sin(math.pi * x)))**4 + abs((math.sin(math.pi * y)))**4\n",
    "    R21 = abs(x + 4) + (-4 - x)\n",
    "    R22 = abs(y + 4) + (-4 - y)\n",
    "    R23 = abs(x - 5) - (5 - x)\n",
    "    R24 = abs(y - 5) - (5 - y)\n",
    "    return fxy + delta * (R1 + R21 + R22 + R23 + R24)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optimización de Monte Carlo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Las técnicas de optimización basadas en gradientes no son apropiadas para funciones que presentan superficies rugosas aún con pocos mínimos locales, ya que el gradiente converge al punto de mínima local más cercano. Es por ello, que deben emplearse metodologías heurísticas para buscar el punto de óptima global de la función optimizada."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La técnica más simple de optimización consiste en generar una malla de puntos igualmente espaciados y evaluar $f(\\mathbf{x})$ en cada punto de la malla. Este método es impractico ya que la cantidad de puntos crece exponencialmente con la cantidad de variables. Corresponde a búsqueda por fuerza bruta. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para la función propuesta, este método resulta simple ya que $x$ y $y$ deben ser enteros, pero esta situación no es la común."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = -1.0000, y = 5.00000, f(x,y) = 70.1700\n"
     ]
    }
   ],
   "source": [
    "x_opt = None\n",
    "y_opt = None\n",
    "f_opt = None\n",
    "\n",
    "for x in np.linspace(-4.0, 5.0, 10):\n",
    "    for y in np.linspace(-4.0, 5.0, 10):\n",
    "        fxy = f(x, y)\n",
    "        if f_opt is None or f_opt < fxy:\n",
    "            x_opt = x\n",
    "            y_opt = y\n",
    "            f_opt = fxy\n",
    "\n",
    "print('x = {:6.4f}, y = {:6.5f}, f(x,y) = {:6.4f}'.format(x_opt, y_opt, f_opt))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En la optimización de Monte Carlo, se generan puntos aleatorios uniformemente distribuidos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = -0.0544, y = 4.97548, f(x,y) = 67.2919\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_opt = None\n",
    "y_opt = None\n",
    "F_opt = None\n",
    "f_opt = None\n",
    "history_F = []\n",
    "history_F_opt = []\n",
    "\n",
    "for n in range(1000):\n",
    "    x = np.random.rand() * 9 - 4\n",
    "    y = np.random.rand() * 9 - 4\n",
    "    Fxy = F(x, y, 1000)\n",
    "    fxy = f(x, y)\n",
    "    history_F.append(Fxy)\n",
    "    if f_opt is None or Fxy < F_opt:\n",
    "        x_opt = x\n",
    "        y_opt = y\n",
    "        F_opt = Fxy\n",
    "        f_opt = fxy\n",
    "    history_F_opt.append(F_opt)\n",
    "\n",
    "print('x = {:6.4f}, y = {:6.5f}, f(x,y) = {:6.4f}'.format(x_opt, y_opt, f_opt))\n",
    "plt.plot(history_F, '-g');\n",
    "plt.plot(history_F_opt, '-r');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El problema de esta metodología es que no aprovecha el conocimiento obtenido cuando se muestrea la superficie generada por la función."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Temple (Recocido) Simulado"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En esta metodología se concentra el muestreo en la región que contiene el óptimo encontrado hasta la iteración actual. Esto se logra mediante la reducción del radio de búsqueda, el cual define la región en que se realiza el muestreo. El radio se reduce en cada iteración."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 1.0439, y = 4.99996, f(x,y) = 70.3051\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## parámetros\n",
    "max_iter = 10000 # número total de iteraciones\n",
    "R = 3.0         # radio inicial de búsqueda\n",
    "alpha = 0.9995   # factor de reducción del radio R de búsqueda\n",
    "delta = 100\n",
    "\n",
    "## punto inicial aleatorio\n",
    "x_opt = np.random.rand() * 9 - 4\n",
    "y_opt = np.random.rand() * 9 - 4\n",
    "F_opt = F(x, y, delta)\n",
    "f_opt = f(x, y)\n",
    "\n",
    "history_F = []\n",
    "history_F_opt = []\n",
    "\n",
    "## optimización\n",
    "for n in range(max_iter):\n",
    "    \n",
    "    ## genera un vector unitario\n",
    "    ## con dirección aleatoria    \n",
    "    dx = 2 * np.random.rand() - 1\n",
    "    dy = 2 * np.random.rand() - 1\n",
    "    d  = math.sqrt(dx**2 + dy**2)\n",
    "    dx = dx / d\n",
    "    dy = dy / d\n",
    "    \n",
    "    ## genera un punto aleatorio dentro de \n",
    "    ## la circunferencia de radio R y con centro\n",
    "    ## en el optimo actual\n",
    "    x = x_opt + R * np.random.rand() * dx\n",
    "    y = y_opt + R * np.random.rand() * dy\n",
    "    fxy = f(x, y)\n",
    "    Fxy = F(x, y, delta)\n",
    "\n",
    "    ## calcula el delta entre el optimo actual\n",
    "    ## y el punto aleatorio\n",
    "    deltaF = Fxy - F_opt\n",
    "\n",
    "    history_F.append(Fxy)\n",
    "    if deltaF < 0.0:\n",
    "        x_opt = x\n",
    "        y_opt = y\n",
    "        F_opt = Fxy\n",
    "        f_opt = fxy\n",
    "    history_F_opt.append(F_opt)\n",
    "    \n",
    "    R = R * alpha\n",
    "\n",
    "print('x = {:6.4f}, y = {:6.5f}, f(x,y) = {:6.4f}'.format(x_opt, y_opt, f_opt))\n",
    "plt.plot(history_F, '-g');\n",
    "plt.plot(history_F_opt, '-r');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Threshold accepting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Usa un factor para que en las primeras iteraciones permita aceptar puntos de calidad inferior a la solución actual, con el fin de que el algoritmo pueda escapar de puntos de mínima local"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = -3.0742, y = -0.96245, f(x,y) = 70.2082\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## parámetros\n",
    "max_iter = 10000 # número total de iteraciones\n",
    "R = 3.0         # radio inicial de búsqueda\n",
    "alpha = 0.999   # factor de reducción del radio R de búsqueda\n",
    "beta  = 0.95    # factor de reducción del factor de aceptación\n",
    "K = 20          # factor de aceptación\n",
    "delta = 100\n",
    "\n",
    "## punto inicial aleatorio\n",
    "x_opt = np.random.rand() * 9 - 4\n",
    "y_opt = np.random.rand() * 9 - 4\n",
    "F_opt = F(x, y, delta)\n",
    "f_opt = f(x, y)\n",
    "\n",
    "history_F = []\n",
    "history_F_opt = []\n",
    "\n",
    "## optimización\n",
    "for n in range(max_iter):\n",
    "    \n",
    "    ## genera un vector unitario\n",
    "    ## con dirección aleatoria    \n",
    "    dx = 2 * np.random.rand() - 1\n",
    "    dy = 2 * np.random.rand() - 1\n",
    "    d  = math.sqrt(dx**2 + dy**2)\n",
    "    dx = dx / d\n",
    "    dy = dy / d\n",
    "    \n",
    "    ## genera un punto aleatorio dentro de \n",
    "    ## la circunferencia de radio R y con centro\n",
    "    ## en el optimo actual\n",
    "    x = x_opt + R * np.random.rand() * dx\n",
    "    y = y_opt + R * np.random.rand() * dy\n",
    "    fxy = f(x, y)\n",
    "    Fxy = F(x, y, delta)\n",
    "\n",
    "    ## calcula el delta entre el optimo actual\n",
    "    ## y el punto aleatorio\n",
    "    deltaF = Fxy - F_opt\n",
    "\n",
    "    history_F.append(Fxy)\n",
    "    if deltaF <= K:\n",
    "        x_opt = x\n",
    "        y_opt = y\n",
    "        F_opt = Fxy\n",
    "        f_opt = fxy\n",
    "    history_F_opt.append(F_opt)        \n",
    "        \n",
    "    R = R * alpha\n",
    "    K = K * beta\n",
    "\n",
    "print('x = {:6.4f}, y = {:6.5f}, f(x,y) = {:6.4f}'.format(x_opt, y_opt, f_opt))\n",
    "plt.plot(history_F, '-g');\n",
    "plt.plot(history_F_opt, '-r');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Combinación con métodos basados en gradientes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Los metodos de optimización presentados son usados para obtener buenos puntos de arranque para los métodos basados en gradientes."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

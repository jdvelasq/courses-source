{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Construcción de un Datapipe en Python\n",
    "=========================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* *90 min* | Última modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El proceso de extracción, transformación, agregación y visualización de datos puede ser completamente automatizado en Python. En este libro se presentan varios ejemplos basados en casos típicos que comúnmente aparecen en la práctica profesional."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para realizar este ejemplo, se genera un conjunto ficticio de datos en el directorio `directory`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Se crea un directorio para el ejemplo.\n",
    "!mkdir directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing directory/file1.csv\n"
     ]
    }
   ],
   "source": [
    "%%writefile directory/file1.csv\n",
    "a,1,12\n",
    "b,2,13\n",
    "c,,'14'\n",
    "0,\\N,15\n",
    "a,\\N,'0'\n",
    "e,,\n",
    "0,\n",
    "\\N,,\n",
    ",,\n",
    "a,0,0\n",
    "\\n,\\n,\\n\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing directory/file2.csv\n"
     ]
    }
   ],
   "source": [
    "%%writefile directory/file2.csv\n",
    "b,1,12\n",
    "a,2,13\n",
    "d,,14\n",
    "0,\\N,15\n",
    "\\n\n",
    "\\n\n",
    "\n",
    "e,,\n",
    ",,,\n",
    "K,3,\\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing directory/file3.csv\n"
     ]
    }
   ],
   "source": [
    "%%writefile directory/file3.csv\n",
    "b;1;12\n",
    "'a';4;13\n",
    "a;3;13\n",
    "\n",
    "'c';3;17\n",
    "'a';'\\n';'15'\n",
    "E;2;0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Los archivos tienen tres columnas. Los valores válidos para cada columna son los siguientes:\n",
    "\n",
    "* Columna 1: Letra en el conjunto {a, b, c, d, e} (en minúsculas).\n",
    "\n",
    "* Columna 2: Número entero.\n",
    "\n",
    "* Columna 3: Número entero.\n",
    "\n",
    "\n",
    "El archivo final que se genera como resultado del proceso de ETL se debe llamar `summary.csv`, y es delimitado por comas. Para este archivo se aplican las siguientes reglas de negocio:\n",
    "\n",
    "* Los campos con valores nulos se indican con `\\N` (mayúscula).\n",
    "\n",
    "* Las líneas en blanco deben ser eliminadas.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solución"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lectura de archivos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['directory/file1.csv', 'directory/file2.csv', 'directory/file3.csv']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import glob\n",
    "\n",
    "filenames = glob.glob('directory/*.csv')\n",
    "filenames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a,1,12\\n',\n",
       " 'b,2,13\\n',\n",
       " \"c,,'14'\\n\",\n",
       " '0,\\\\N,15\\n',\n",
       " \"a,\\\\N,'0'\\n\",\n",
       " 'e,,\\n',\n",
       " '0,\\n',\n",
       " '\\\\N,,\\n',\n",
       " ',,\\n',\n",
       " 'a,0,0\\n',\n",
       " '\\\\n,\\\\n,\\\\n\\n',\n",
       " 'b,1,12\\n',\n",
       " 'a,2,13\\n',\n",
       " 'd,,14\\n',\n",
       " '0,\\\\N,15\\n',\n",
       " '\\\\n\\n',\n",
       " '\\\\n\\n',\n",
       " '\\n',\n",
       " 'e,,\\n',\n",
       " ',,,\\n',\n",
       " 'K,3,\\\\n\\n',\n",
       " 'b;1;12\\n',\n",
       " \"'a';4;13\\n\",\n",
       " 'a;3;13\\n',\n",
       " '\\n',\n",
       " \"'c';3;17\\n\",\n",
       " \"'a';'\\\\n';'15'\\n\",\n",
       " 'E;2;0\\n']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Se crea una variable para almacenar el contenido\n",
    "## de los archivos\n",
    "text = []\n",
    "\n",
    "## Para cada archivo en la lista de archivos\n",
    "## se abre el archivo y se lee su contenido.\n",
    "## La función readlines() devuelve el contenido del\n",
    "## archivo como una lista de strings, donde cada\n",
    "## string es una linea del archivo. Finalmente, el \n",
    "## operador '+' concatena las listas.\n",
    "for filename in filenames:\n",
    "    with open(filename, 'rt') as f:\n",
    "        text += f.readlines()\n",
    "\n",
    "text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a,1,12',\n",
       " 'b,2,13',\n",
       " \"c,,'14'\",\n",
       " '0,\\\\N,15',\n",
       " \"a,\\\\N,'0'\",\n",
       " 'e,,',\n",
       " '0,',\n",
       " '\\\\N,,',\n",
       " ',,',\n",
       " 'a,0,0',\n",
       " '\\\\n,\\\\n,\\\\n',\n",
       " 'b,1,12',\n",
       " 'a,2,13',\n",
       " 'd,,14',\n",
       " '0,\\\\N,15',\n",
       " '\\\\n',\n",
       " '\\\\n',\n",
       " '',\n",
       " 'e,,',\n",
       " ',,,',\n",
       " 'K,3,\\\\n',\n",
       " 'b;1;12',\n",
       " \"'a';4;13\",\n",
       " 'a;3;13',\n",
       " '',\n",
       " \"'c';3;17\",\n",
       " \"'a';'\\\\n';'15'\",\n",
       " 'E;2;0']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Note que se leyo tambien el retorno de carro '\\n'.\n",
    "## Se procede a eliminarlo. line[:-1] indica el \n",
    "## contenido de line desde el primer caracter hasta\n",
    "## el penúltimo\n",
    "text = [line[:-1] for line in text]\n",
    "text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regla: Todos los registros deben tener tres (3) columnas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '']\n",
      "['\\\\n']\n",
      "['\\\\n']\n",
      "['']\n",
      "['', '', '', '']\n",
      "['b;1;12']\n",
      "[\"'a';4;13\"]\n",
      "['a;3;13']\n",
      "['']\n",
      "[\"'c';3;17\"]\n",
      "[\"'a';'\\\\n';'15'\"]\n",
      "['E;2;0']\n"
     ]
    }
   ],
   "source": [
    "## Se separan los campos deliminados por comas\n",
    "csv = [line.split(',') for line in text]\n",
    "\n",
    "## Se imprimen las lineas que no tienen tres campos\n",
    "for line in csv:\n",
    "    if len(line) != 3:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '']\n",
      "['\\\\n']\n",
      "['\\\\n']\n",
      "['']\n",
      "['', '', '', '']\n",
      "['']\n"
     ]
    }
   ],
   "source": [
    "## Hay archivos que están delimitados por ';'.\n",
    "## Se reemplazan el ';' por ',' y se verifica nuevamente\n",
    "text = [line.replace(';', ',') for line in text]\n",
    "\n",
    "csv = [line.split(',') for line in text]\n",
    "for line in csv:\n",
    "    if len(line) != 3:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '']\n",
      "['\\\\n']\n",
      "['\\\\n']\n",
      "['', '', '', '']\n"
     ]
    }
   ],
   "source": [
    "## Hay lineas vacias\n",
    "\n",
    "text = [line for line in text if line != '']\n",
    "\n",
    "csv = [line.split(',') for line in text]\n",
    "for line in csv:\n",
    "    if len(line) != 3:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', '1', '12'],\n",
       " ['b', '2', '13'],\n",
       " ['c', '', \"'14'\"],\n",
       " ['0', '\\\\N', '15'],\n",
       " ['a', '\\\\N', \"'0'\"],\n",
       " ['e', '', ''],\n",
       " ['\\\\N', '', ''],\n",
       " ['', '', ''],\n",
       " ['a', '0', '0'],\n",
       " ['\\\\n', '\\\\n', '\\\\n'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '2', '13'],\n",
       " ['d', '', '14'],\n",
       " ['0', '\\\\N', '15'],\n",
       " ['e', '', ''],\n",
       " ['K', '3', '\\\\n'],\n",
       " ['b', '1', '12'],\n",
       " [\"'a'\", '4', '13'],\n",
       " ['a', '3', '13'],\n",
       " [\"'c'\", '3', '17'],\n",
       " [\"'a'\", \"'\\\\n'\", \"'15'\"],\n",
       " ['E', '2', '0']]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Se pueden eliminar lineas que no tienen tres campos\n",
    "\n",
    "csv = [line.split(',') for line in text]\n",
    "csv = [line for line in csv if len(line) == 3]\n",
    "csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Los valores válidos de la columna 1 son {a, b, c, d, e} en minúsculas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '\\\\N', '15']\n",
      "['', '', '']\n",
      "['\\\\n', '\\\\n', '\\\\n']\n",
      "['0', '\\\\N', '15']\n",
      "['K', '3', '\\\\n']\n",
      "[\"'a'\", '4', '13']\n",
      "[\"'c'\", '3', '17']\n",
      "[\"'a'\", \"'\\\\n'\", \"'15'\"]\n",
      "['E', '2', '0']\n"
     ]
    }
   ],
   "source": [
    "## El prime paso es inspeccionar los valores de la columna 1 que no \n",
    "## son válidos para determinar las acciones a tomar.\n",
    "\n",
    "for line in csv:\n",
    "    if line[0] not in ['a', 'b', 'c', 'd', 'e', '\\\\N']:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '\\\\N', '15']\n",
      "['', '', '']\n",
      "['\\\\n', '\\\\n', '\\\\n']\n",
      "['0', '\\\\N', '15']\n",
      "['K', '3', '\\\\n']\n",
      "['E', '2', '0']\n"
     ]
    }
   ],
   "source": [
    "## Hay registros con letras delimitadas por comillas simples\n",
    "csv = [ [line[0][1:2]] + line[1:] if len(line[0]) == 3 else line for line in csv]\n",
    "\n",
    "## se imprimen los registros que continuan con problemas\n",
    "for line in csv:\n",
    "    if line[0] not in ['a', 'b', 'c', 'd', 'e', '\\\\N']:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '\\\\N', '15']\n",
      "['\\\\n', '', '']\n",
      "['', '', '']\n",
      "['\\\\n', '\\\\n', '\\\\n']\n",
      "['0', '\\\\N', '15']\n",
      "['k', '3', '\\\\n']\n"
     ]
    }
   ],
   "source": [
    "## Hay letras en mayúsculas\n",
    "csv = [ [line[0].lower()] + line[1:] for line in csv]\n",
    "\n",
    "for line in csv:\n",
    "    if line[0] not in ['a', 'b', 'c', 'd', 'e', '\\\\N']:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Se toma la decisión de remplazar los valores inválidos\n",
    "## en la columna 1 por \\N\n",
    "csv = [ ['\\\\N'] + line[1:] if line[0] not in ['a', 'b', 'c', 'd', 'e'] else line for line in csv]\n",
    "\n",
    "for line in csv:\n",
    "    if line[0] not in ['a', 'b', 'c', 'd', 'e', '\\\\N']:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', '1', '12'],\n",
       " ['b', '2', '13'],\n",
       " ['c', '', \"'14'\"],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['a', '\\\\N', \"'0'\"],\n",
       " ['e', '', ''],\n",
       " ['\\\\N', '', ''],\n",
       " ['\\\\N', '', ''],\n",
       " ['a', '0', '0'],\n",
       " ['\\\\N', '\\\\n', '\\\\n'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '2', '13'],\n",
       " ['d', '', '14'],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['e', '', ''],\n",
       " ['\\\\N', '3', '\\\\n'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '4', '13'],\n",
       " ['a', '3', '13'],\n",
       " ['c', '3', '17'],\n",
       " ['a', \"'\\\\n'\", \"'15'\"],\n",
       " ['e', '2', '0']]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## se visualilza el resultado\n",
    "csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', '1', '12'],\n",
       " ['b', '2', '13'],\n",
       " ['c', '', \"'14'\"],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['a', '\\\\N', \"'0'\"],\n",
       " ['e', '', ''],\n",
       " ['\\\\N', '', ''],\n",
       " ['\\\\N', '', ''],\n",
       " ['a', '0', '0'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '2', '13'],\n",
       " ['d', '', '14'],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['e', '', ''],\n",
       " ['\\\\N', '3', '\\\\N'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '4', '13'],\n",
       " ['a', '3', '13'],\n",
       " ['c', '3', '17'],\n",
       " ['a', \"'\\\\N'\", \"'15'\"],\n",
       " ['e', '2', '0']]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Regla 2: los valores nulos se notan como '\\N'\n",
    "\n",
    "## Se reemplazan los '\\n' por '\\N'\n",
    "## es mas simple procesar cada linea como un string\n",
    "text = [','.join(line) for line in csv]\n",
    "text = [line.replace('\\\\n', '\\\\N') for line in text]\n",
    "csv = [line.split(',') for line in text]\n",
    "csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', '1', '12'],\n",
       " ['b', '2', '13'],\n",
       " ['c', '\\\\N', \"'14'\"],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['a', '\\\\N', \"'0'\"],\n",
       " ['e', '\\\\N', '\\\\N'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['a', '0', '0'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '2', '13'],\n",
       " ['d', '\\\\N', '14'],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['e', '\\\\N', '\\\\N'],\n",
       " ['\\\\N', '3', '\\\\N'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '4', '13'],\n",
       " ['a', '3', '13'],\n",
       " ['c', '3', '17'],\n",
       " ['a', \"'\\\\N'\", \"'15'\"],\n",
       " ['e', '2', '0']]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Los '' se reemplazan por '\\N'\n",
    "csv = [['\\\\N' if field == '' else field for field in line] for line in csv]\n",
    "csv "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Los valores de la columna 2 son enteros o nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', \"'\\\\N'\", \"'15'\"]]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Se imprimen los registros con problemas\n",
    "[line for line in csv if not line[1].isdigit() and line[1] != '\\\\N']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['a', '1', '12'],\n",
       " ['b', '2', '13'],\n",
       " ['c', '\\\\N', \"'14'\"],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['a', '\\\\N', \"'0'\"],\n",
       " ['e', '\\\\N', '\\\\N'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['a', '0', '0'],\n",
       " ['\\\\N', '\\\\N', '\\\\N'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '2', '13'],\n",
       " ['d', '\\\\N', '14'],\n",
       " ['\\\\N', '\\\\N', '15'],\n",
       " ['e', '\\\\N', '\\\\N'],\n",
       " ['\\\\N', '3', '\\\\N'],\n",
       " ['b', '1', '12'],\n",
       " ['a', '4', '13'],\n",
       " ['a', '3', '13'],\n",
       " ['c', '3', '17'],\n",
       " ['a', '\\\\N', \"'15'\"],\n",
       " ['e', '2', '0']]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Hay nulos con comillas simples\n",
    "text = [','.join(line) for line in csv]\n",
    "text = [line.replace(\"'\\\\N'\", '\\\\N') for line in text]\n",
    "csv = [line.split(',') for line in text]\n",
    "csv\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Los valores de la columna 3 son enteros o nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['c', '\\\\N', \"'14'\"], ['a', '\\\\N', \"'0'\"], ['a', '\\\\N', \"'15'\"]]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Se imprimen los registros con problemas\n",
    "[line for line in csv if not line[2].isdigit() and line[2] != '\\\\N']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Hay valores entre comillas simples\n",
    "csv = [line[:2] + [line[2][1:-1]] if (line[2][0] == \"'\" and line[2] != '\\\\N')  else line for line in csv ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Se genera el archivo de salida"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a,1,12',\n",
       " 'b,2,13',\n",
       " 'c,\\\\N,14',\n",
       " '\\\\N,\\\\N,15',\n",
       " 'a,\\\\N,0',\n",
       " 'e,\\\\N,\\\\N',\n",
       " '\\\\N,\\\\N,\\\\N',\n",
       " '\\\\N,\\\\N,\\\\N',\n",
       " 'a,0,0',\n",
       " '\\\\N,\\\\N,\\\\N',\n",
       " 'b,1,12',\n",
       " 'a,2,13',\n",
       " 'd,\\\\N,14',\n",
       " '\\\\N,\\\\N,15',\n",
       " 'e,\\\\N,\\\\N',\n",
       " '\\\\N,3,\\\\N',\n",
       " 'b,1,12',\n",
       " 'a,4,13',\n",
       " 'a,3,13',\n",
       " 'c,3,17',\n",
       " 'a,\\\\N,15',\n",
       " 'e,2,0']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text = [','.join(line) for line in csv]\n",
    "text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = '\\n'.join(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"summary.csv\", \"w\") as f:\n",
    "    f.write(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a,1,12\n",
      "b,2,13\n",
      "c,\\N,14\n",
      "\\N,\\N,15\n",
      "a,\\N,0\n",
      "e,\\N,\\N\n",
      "\\N,\\N,\\N\n",
      "\\N,\\N,\\N\n",
      "a,0,0\n",
      "\\N,\\N,\\N\n",
      "b,1,12\n",
      "a,2,13\n",
      "d,\\N,14\n",
      "\\N,\\N,15\n",
      "e,\\N,\\N\n",
      "\\N,3,\\N\n",
      "b,1,12\n",
      "a,4,13\n",
      "a,3,13\n",
      "c,3,17\n",
      "a,\\N,15\n",
      "e,2,0"
     ]
    }
   ],
   "source": [
    "!cat summary.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "## limpia el directorio de trabajo\n",
    "!rm -rf directory\n",
    "!rm summary.csv"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

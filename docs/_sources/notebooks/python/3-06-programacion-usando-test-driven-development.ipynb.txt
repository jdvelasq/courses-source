{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Programación usando Test Development Driven\n",
    "==========================\n",
    "\n",
    "* *30 min* | Última modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Doctest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Doctest permite correr las pruebas escritas en la documentación del coódigo de forma automática. En otras palabras, permite verificar que el código siga funcionando correctamente después de introducir cambios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[H\u001b[2J**********************************************************************\n",
      "File \"__main__\", line 15, in __main__\n",
      "Failed example:\n",
      "    suma(1, 1)\n",
      "Expected:\n",
      "    3\n",
      "Got:\n",
      "    2\n",
      "**********************************************************************\n",
      "1 items had failures:\n",
      "   1 of   2 in __main__\n",
      "***Test Failed*** 1 failures.\n"
     ]
    }
   ],
   "source": [
    "%clear\n",
    "\"\"\"\n",
    "Este es un ejemplo usando `doctest`. Las líneas que empiezan\n",
    "con `>>>` son interpretada como código en Python. `doctest`\n",
    "extrae dichas líneas, las ejecuta y compara contra el resultado\n",
    "indicado.\n",
    "\n",
    "En este ejemplo, la función suma(a, b) debe retornar a+b. \n",
    "Note que en el primera llamada el resultado es correcto, \n",
    "mientras que en la segunda es incorrecto.\n",
    "\n",
    ">>> suma(1, 1)\n",
    "2\n",
    "\n",
    ">>> suma(1, 1)\n",
    "3\n",
    "\n",
    "\"\"\"\n",
    "def suma(a, b):\n",
    "    return a + b\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    import doctest\n",
    "    doctest.testmod()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La salida anterior indica para cual caso se produce el error, lo que permite la depuración posterior."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El ejemplo anterior se modifica para incluir una llamada al depurador. Los comandos del depurador aparecen en https://docs.python.org/3/library/pdb.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[H\u001b[2J> <ipython-input-2-d31c6c172fbf>(23)suma()\n",
      "-> return a + b\n",
      "a = 1\n",
      "b = 1\n",
      "--Return--\n",
      "> <ipython-input-2-d31c6c172fbf>(23)suma()->2\n",
      "-> return a + b\n",
      "*** NameError: name 'e' is not defined\n",
      "--Return--\n",
      "> <doctest __main__[0]>(1)<module>()->None\n",
      "-> suma(1, 1)\n",
      "*** NameError: name 'e' is not defined\n",
      "> <ipython-input-2-d31c6c172fbf>(23)suma()\n",
      "-> return a + b\n",
      "**********************************************************************\n",
      "File \"__main__\", line 15, in __main__\n",
      "Failed example:\n",
      "    suma(1, 1)\n",
      "Expected:\n",
      "    3\n",
      "Got:\n",
      "    2\n",
      "**********************************************************************\n",
      "1 items had failures:\n",
      "   1 of   2 in __main__\n",
      "***Test Failed*** 1 failures.\n"
     ]
    }
   ],
   "source": [
    "%clear\n",
    "\"\"\"\n",
    "Este es un ejemplo usando `doctest`. Las líneas que empiezan\n",
    "con `>>>` son interpretada como código en Python. `doctest`\n",
    "extrae dichas líneas, las ejecuta y compara contra el resultado\n",
    "indicado.\n",
    "\n",
    "En este ejemplo, la función suma(a, b) debe retornar a+b. \n",
    "Note que en el primera llamada el resultado es correcto, \n",
    "mientras que en la segunda es incorrecto.\n",
    "\n",
    ">>> suma(1, 1)\n",
    "2\n",
    "\n",
    ">>> suma(1, 1)\n",
    "3\n",
    "\n",
    "\"\"\"\n",
    "def suma(a, b):\n",
    "    ## código nuevo >>>\n",
    "    import pdb; pdb.set_trace()\n",
    "    ## <<<\n",
    "    return a + b\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    import doctest\n",
    "    doctest.testmod()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "nteract": {
   "version": "0.7.1"
  },
  "toc-autonumbering": false
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Análisis de datos usando  PySpark SQL\n",
    "===\n",
    "\n",
    "* *30 min* | Última modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este tutorial se presenta el análisis de una base de datos sobre vuelos usando SQL en Spark desde la interfaz de Python. En este documento se ejemplifica el uso de DataFrames para la realización de consultas usando sus funciones nativas, como también el envio de comandos SQL. Adicionalmente, se demuestra como salvar los resultados al HDFS en distintos formatos. \n",
    "\n",
    "Al finalizar este documento, el lector estará en capacidad de:\n",
    "\n",
    "* Mover archivos entre el HDFS y el sistema local.\n",
    "\n",
    "* Importar tablas en formato CSV a PySpark.\n",
    "\n",
    "* Aplicar operadores de selección, filtrado y agregación desde Python.\n",
    "\n",
    "* Usar los resultados obtenidos para construir gráficos.\n",
    "\n",
    "* Exportar los resultados a archivos en el sistema HDFS."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Este ejemplo está basado en el tutorial de Spark de HortoWorks, disponible en https://es.hortonworks.com/tutorial/learning-spark-sql-with-zeppelin/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción de los campos del archivo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El archivo usado contiene la información sobre vuelos entre 1987 y 2008, y cuenta con los siguientes campos:\n",
    "\n",
    "* Year: 1987-2008\n",
    "\n",
    "* Month: 1-12\n",
    "\n",
    "* DayofMonth: 1-31\n",
    "\n",
    "* DayOfWeek: 1 (Monday) - 7 (Sunday)\n",
    "\n",
    "* DepTime: actual departure time (local, hhmm)\n",
    "\n",
    "* CRSDepTime: scheduled departure time (local, hhmm)\n",
    "\n",
    "* ArrTime: actual arrival time (local, hhmm)\n",
    "\n",
    "* CRSArrTime: scheduled arrival time (local, hhmm)\n",
    "\n",
    "* UniqueCarrier: unique carrier code\n",
    "\n",
    "* FlightNum: flight number\n",
    "\n",
    "* TailNum: plane tail number\n",
    "\n",
    "* ActualElapsedTime: in minutes\n",
    "\n",
    "* CRSElapsedTime: in minutes\n",
    "\n",
    "* AirTime: in minutes\n",
    "\n",
    "* ArrDelay: arrival delay, in minutes\n",
    "\n",
    "* DepDelay: departure delay, in minutes\n",
    "\n",
    "* Origin: origin IATA airport code\n",
    "\n",
    "* Dest: destination IATA airport code\n",
    "\n",
    "* Distance: in miles\n",
    "\n",
    "* TaxiIn: taxi in time, in minutes\n",
    "\n",
    "* TaxiOut: taxi out time in minutes\n",
    "\n",
    "* Cancelled: was the flight cancelled?\n",
    "\n",
    "* CancellationCode: reason for cancellation (A = carrier, B = weather, C = NAS, D = security)\n",
    "\n",
    "* Diverted: 1 = yes, 0 = no\n",
    "\n",
    "* CarrierDelay: in minutes\n",
    "\n",
    "* WeatherDelay: in minutes\n",
    "\n",
    "* NASDelay: in minutes\n",
    "\n",
    "* SecurityDelay: in minutes\n",
    "\n",
    "* LateAircraftDelay: in minutes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import findspark\n",
    "from pyspark import SparkConf, SparkContext\n",
    "from pyspark.sql import SparkSession\n",
    "\n",
    "findspark.init()\n",
    "sparkConf = SparkConf().setAppName(\"Flights SparkQL Application\") \n",
    "sc = SparkContext(conf=sparkConf)\n",
    "spark = SparkSession(sc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Copia de archivos al HDFS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-r--r--   1 vagrant supergroup    9719582 2019-05-20 21:43 /tmp/flights.csv\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## El archivo flights.csv se encuentra en la capeta de\n",
    "## trabajo de la máquina local. Se copia el archivo \n",
    "## a la carpeta /tmp del sistema HDFS.\n",
    "##\n",
    "!hdfs dfs -copyFromLocal flights.csv /tmp/\n",
    "\n",
    "##\n",
    "## Se listan los archivos en la carpeta /tmp del HDFS\n",
    "## para verificar que el archivo haya sido copiado\n",
    "##\n",
    "!hdfs dfs -ls /tmp/*csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Carga de datos en Spark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Crea un DataFrame a partir del archivo fligths.csv\n",
    "##\n",
    "flights = spark.read.load(\"/tmp/flights.csv\",\n",
    "                          format=\"csv\", \n",
    "                          sep=\",\", \n",
    "                          inferSchema=\"true\", \n",
    "                          header=\"true\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Year: integer (nullable = true)\n",
      " |-- Month: integer (nullable = true)\n",
      " |-- DayofMonth: integer (nullable = true)\n",
      " |-- DayOfWeek: integer (nullable = true)\n",
      " |-- DepTime: string (nullable = true)\n",
      " |-- CRSDepTime: integer (nullable = true)\n",
      " |-- ArrTime: string (nullable = true)\n",
      " |-- CRSArrTime: integer (nullable = true)\n",
      " |-- UniqueCarrier: string (nullable = true)\n",
      " |-- FlightNum: integer (nullable = true)\n",
      " |-- TailNum: string (nullable = true)\n",
      " |-- ActualElapsedTime: string (nullable = true)\n",
      " |-- CRSElapsedTime: integer (nullable = true)\n",
      " |-- AirTime: string (nullable = true)\n",
      " |-- ArrDelay: string (nullable = true)\n",
      " |-- DepDelay: string (nullable = true)\n",
      " |-- Origin: string (nullable = true)\n",
      " |-- Dest: string (nullable = true)\n",
      " |-- Distance: integer (nullable = true)\n",
      " |-- TaxiIn: string (nullable = true)\n",
      " |-- TaxiOut: string (nullable = true)\n",
      " |-- Cancelled: integer (nullable = true)\n",
      " |-- CancellationCode: string (nullable = true)\n",
      " |-- Diverted: integer (nullable = true)\n",
      " |-- CarrierDelay: string (nullable = true)\n",
      " |-- WeatherDelay: string (nullable = true)\n",
      " |-- NASDelay: string (nullable = true)\n",
      " |-- SecurityDelay: string (nullable = true)\n",
      " |-- LateAircraftDelay: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Se imprime el esquema para verificar la lectura\n",
    "## del archivo.\n",
    "##\n",
    "flights.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+---------+--------+--------+--------+\n",
      "|UniqueCarrier|FlightNum|DepDelay|ArrDelay|Distance|\n",
      "+-------------+---------+--------+--------+--------+\n",
      "|           WN|      335|       8|     -14|     810|\n",
      "|           WN|     3231|      19|       2|     810|\n",
      "|           WN|      448|       8|      14|     515|\n",
      "|           WN|     1746|      -4|      -6|     515|\n",
      "|           WN|     3920|      34|      34|     515|\n",
      "+-------------+---------+--------+--------+--------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## \n",
    "## Se imprime un subconjunto de las columnas para verificar\n",
    "## la lectura\n",
    "##\n",
    "flights.select(['UniqueCarrier', 'FlightNum', 'DepDelay', 'ArrDelay', 'Distance']).show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##\n",
    "## Número total de registros leidos\n",
    "##\n",
    "numTotalFlights = flights.count()\n",
    "numTotalFlights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cálculos usando funciones de los DataFrames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cómputo del porcentaje de vuelos retrasados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+--------+\n",
      "|UniqueCarrier|DepDelay|\n",
      "+-------------+--------+\n",
      "|           WN|      19|\n",
      "|           WN|      34|\n",
      "|           WN|      25|\n",
      "|           WN|      67|\n",
      "|           WN|      94|\n",
      "+-------------+--------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## La variable delayedFlights contiene las columnas UniqueCarrier y DepDelay \n",
    "## para los vuelos con DepDelay > 15 minutos.\n",
    "##\n",
    "delayedFlights = flights.select(['UniqueCarrier', 'DepDelay']).filter(flights['DepDelay'] > 15)\n",
    "delayedFlights.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Porcentaje de vuelos retrasados: 19.587%\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Porcentaje de vuelos retrasados.\n",
    "##\n",
    "numDelayedFlights = delayedFlights.count()\n",
    "print(\"Porcentaje de vuelos retrasados: \" + str(numDelayedFlights / numTotalFlights * 100) + \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creación de variables usando funciones de usuario"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se desea crear una nueva columna llamada `IsDelayed` que vale 0 si el vuelo se realizó a tiempo y 1 si se retraso. Ya que la nueva columna, es computada como función de otra, se una una función de usuario (o udf) programada en Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Esta función se aplicará sobre el DataFrame.\n",
    "## El parámetro time será la columna DepDelay\n",
    "##\n",
    "def is_delayed_py(time):\n",
    "    if time == \"NA\":\n",
    "        return 0 \n",
    "    elif int(time) > 15:\n",
    "        return 1 \n",
    "    else: \n",
    "        return 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se registra la función en Spark y se aplica sobre el Dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+---------+\n",
      "|DepDelay|isDelayed|\n",
      "+--------+---------+\n",
      "|       8|        0|\n",
      "|      19|        1|\n",
      "|       8|        0|\n",
      "|      -4|        0|\n",
      "|      34|        1|\n",
      "|      25|        1|\n",
      "|      67|        1|\n",
      "|      -1|        0|\n",
      "|       2|        0|\n",
      "|       0|        0|\n",
      "|       6|        0|\n",
      "|      94|        1|\n",
      "|      -4|        0|\n",
      "|       0|        0|\n",
      "|       2|        0|\n",
      "|       9|        0|\n",
      "|      27|        1|\n",
      "|       9|        0|\n",
      "|      28|        1|\n",
      "|      51|        1|\n",
      "+--------+---------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Importa la función udf que permite registra funciones \n",
    "## escritas en Python dentro de Spark\n",
    "## \n",
    "from pyspark.sql.functions import udf\n",
    "from pyspark.sql.types import LongType\n",
    "\n",
    "##\n",
    "## Se registra la función con el tipo de dato que devuelve.\n",
    "## is_delayed_udf corresponde a la función registrada en Spark.\n",
    "## Adicionalmente, se indica el tipo de dato que devuelve.\n",
    "##\n",
    "is_delayed_udf = udf(is_delayed_py, LongType())\n",
    "\n",
    "##\n",
    "## Se crea un nuevo DataFrame que contiene la columna \n",
    "## IsDelayed, la cual es computada con la udf\n",
    "##\n",
    "flightsWithDelays = flights.select('Year', \n",
    "                                   'Month', \n",
    "                                   'DayofMonth', \n",
    "                                   'UniqueCarrier', \n",
    "                                   'FlightNum', \n",
    "                                   'DepDelay',\n",
    "                                   is_delayed_udf(\"DepDelay\").alias(\"IsDelayed\"))\n",
    "\n",
    "##\n",
    "## Se imprimen algunos registros para verificar el resultado.\n",
    "##\n",
    "flightsWithDelays.select('DepDelay', 'isDelayed').show(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------------------+\n",
      "|Porcentaje de vuelos retrasados|\n",
      "+-------------------------------+\n",
      "|                         19.587|\n",
      "+-------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## \n",
    "## A continuación, se calcula el porcentaje de vuelos con retrasos\n",
    "##\n",
    "from pyspark.sql import functions as F\n",
    "flightsWithDelays.agg((F.sum('IsDelayed') * 100 / F.count('DepDelay')) \\\n",
    "                      .alias(\"Porcentaje de vuelos retrasados\")).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cómputo de los tiempos promedio de despegue (Taxi-in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----+------------------+\n",
      "|Origin|Dest|         AvgTaxiIn|\n",
      "+------+----+------------------+\n",
      "|   CLT| IAH|              22.0|\n",
      "|   IAH| ABQ|              18.0|\n",
      "|   MCI| IAH|14.666666666666666|\n",
      "|   BHM| EWR|              13.0|\n",
      "|   SMF| GEG|12.462962962962964|\n",
      "|   MHT| CLE|              12.0|\n",
      "|   CRW| IAH|              12.0|\n",
      "|   IAH| JAX|              11.0|\n",
      "|   ONT| COS|10.903225806451612|\n",
      "|   SMF| COS|10.610169491525424|\n",
      "+------+----+------------------+\n",
      "only showing top 10 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## En este código se ilustra como computar un promedio \n",
    "## y luego realizar el ordenamiento de la tabla por\n",
    "## ese mismo promedio.\n",
    "##\n",
    "(flights.select(\"Origin\", \"Dest\", \"TaxiIn\") \\\n",
    "    .groupBy(\"Origin\", \"Dest\") \\\n",
    "    .agg(F.avg(\"TaxiIn\").alias(\"AvgTaxiIn\"))) \\\n",
    "        .orderBy(\"AvgTaxiIn\", ascending = False) \\\n",
    "        .show(10)                                  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cómputo de los tiempos promedio de aterrizaje"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----+----------+\n",
      "|Origin|Dest|AvgTaxiOut|\n",
      "+------+----+----------+\n",
      "|   LCH| IAH|      84.0|\n",
      "|   EWR| BHM|      63.0|\n",
      "|   EWR| SDF|      45.0|\n",
      "|   EWR| GSO|      36.5|\n",
      "|   MHT| CLE|      33.0|\n",
      "|   EWR| JAX|      28.0|\n",
      "|   EWR| DTW|      27.0|\n",
      "|   CLE| SDF|      27.0|\n",
      "|   ORD| EWR|      26.0|\n",
      "|   EWR| MCI|      26.0|\n",
      "+------+----+----------+\n",
      "only showing top 10 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## En este código se ilustra como computar un promedio \n",
    "## y luego realizar el ordenamiento de la tabla por\n",
    "## ese mismo promedio.\n",
    "##\n",
    "(flights.select(\"Origin\", \"Dest\", \"TaxiOut\") \\\n",
    "    .groupBy(\"Origin\", \"Dest\") \\\n",
    "    .agg(F.avg(\"TaxiOut\").alias(\"AvgTaxiOut\"))) \\\n",
    "        .orderBy(\"AvgTaxiOut\", ascending = False) \\\n",
    "        .show(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cómputos usando SQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se realizan los mismos cálculos anteriores, pero usando SQL desde Spark."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "## \n",
    "## Se crea la tabla\n",
    "##\n",
    "flights.createOrReplaceTempView('flightsView')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+---------+\n",
      "|DepDelay|isDelayed|\n",
      "+--------+---------+\n",
      "|       8|        0|\n",
      "|      19|        1|\n",
      "|       8|        0|\n",
      "|      -4|        0|\n",
      "|      34|        1|\n",
      "|      25|        1|\n",
      "|      67|        1|\n",
      "|      -1|        0|\n",
      "|       2|        0|\n",
      "|       0|        0|\n",
      "|       6|        0|\n",
      "|      94|        1|\n",
      "|      -4|        0|\n",
      "|       0|        0|\n",
      "|       2|        0|\n",
      "|       9|        0|\n",
      "|      27|        1|\n",
      "|       9|        0|\n",
      "|      28|        1|\n",
      "|      51|        1|\n",
      "+--------+---------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Se registra la función para usar con Spark SQL\n",
    "## \n",
    "from pyspark.sql.types import LongType\n",
    "\n",
    "## Registra la función.\n",
    "spark.udf.register('isDelayed_SQL', is_delayed_py)\n",
    "\n",
    "## Aplica la función\n",
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    DepDelay, \n",
    "    isDelayed_SQL(DepDelay) as isDelayed \n",
    "FROM \n",
    "    flightsView\n",
    "\"\"\").show(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+---------+\n",
      "|UniqueCarrier|NumDelays|\n",
      "+-------------+---------+\n",
      "|           XE|   1014.0|\n",
      "|           WN|  18573.0|\n",
      "+-------------+---------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Numero total de retrasos por transportador\n",
    "##\n",
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    UniqueCarrier, \n",
    "    SUM(isDelayed_SQL(DepDelay)) AS NumDelays \n",
    "FROM \n",
    "    flightsView \n",
    "GROUP BY \n",
    "    UniqueCarrier\n",
    "\"\"\").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYcAAAD4CAYAAAAHHSreAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAFhxJREFUeJzt3XuwXWWd5vHvA4HEG9ecwUhwEunIAImmIYBVM904MkCkrY6MFBet5iIkKqCNl5qOo1UwCFV0D5gq1MGCIYiKXCaQMUXDAA3a1tRIk6QJIREwCWJxUhFisKOgIIHf/HHWSW+yTi5kn2Tn8v1U7dpr/db7rvXuXSfnyVrv2vukqpAkqdMevR6AJGnHYzhIkloMB0lSi+EgSWoxHCRJLYaDJKnFcJAktRgOkqQWw0GS1DKi1wPYWqNHj65x48b1ehiStFNZuHDhr6uqb3PtdtpwGDduHAsWLOj1MCRpp5Lkl1vSzstKkqQWw0GS1GI4SJJadto5h6G8+uqr9Pf38/LLL/d6KLuFUaNGMXbsWPbaa69eD0XSMNulwqG/v593vOMdjBs3jiS9Hs4urapYs2YN/f39jB8/vtfDkTTMdqnLSi+//DIHHnigwbAdJOHAAw/0LE3aRe1S4QAYDNuR77W069rlwkGS1L1das5hQ+Nm/v2w7u+Zq/5is22S8IUvfIFrrrkGgKuvvpoXX3yRyy67rOvjX3bZZdxwww309fXx0ksvMWnSJK644gqOOOKITfY799xz+chHPsJpp53W9Ri06xjufx+7uy35/bAz8cxhmI0cOZK77rqLX//619tk/5///OdZtGgRy5Yt44wzzuBDH/oQq1ev3ibHkrT7MhyG2YgRI5gxYwazZs1qbTv33HOZM2fO+vW3v/3tAPz4xz/m+OOPZ9q0abznPe9h5syZ3HLLLRx77LFMmjSJFStWDHmsM844g5NOOokf/OAHACxcuJDjjz+eo48+mpNPPplVq1a1+lx++eUcc8wxTJw4kRkzZlBVrFixgqOOOmp9m2XLlq1fnzlzJkcccQTve9/7+NKXvrT1b4yknYrhsA1cdNFF3HLLLaxdu3aL+zz22GN8+9vf5oknnuB73/seP//5z3nkkUe44IIL+MY3vrHRfkcddRRPPvkkr776Kp/97GeZM2cOCxcu5JOf/CRf+cpXWu0vvvhi5s+fz5IlS/jDH/7A3XffzaGHHsq+++7LokWLALjppps477zzWLNmDXPnzmXp0qUsXryYr371q2/+zZC0UzIctoF99tmHs88+m2uvvXaL+xxzzDGMGTOGkSNHcuihh3LSSScBMGnSJJ555pmN9qsqAJ566imWLFnCiSeeyOTJk7niiivo7+9vtf/Rj37Ecccdx6RJk3jooYdYunQpABdccAE33XQTr732Grfffjsf//jH2XfffRk1ahTnn38+d911F29961vfxLsgaWdmOGwjl1xyCTfeeCMvvfTS+tqIESN4/fXXAXj99df54x//uH7byJEj1y/vscce69f32GMP1q1bt9HjPProoxx++OFUFUceeSSLFi1i0aJFPP7449x///1vaPvyyy9z4YUXMmfOHB5//HGmT5++/nMKH/vYx7j33nu5++67OfrooznwwAMZMWIEjzzyCKeddhp33303U6dO7f6NkbRTMBy2kQMOOIDTTz+dG2+8cX1t3LhxLFy4EIB58+bx6quvdnWMO++8k/vvv5+zzjqLww47jNWrV/PTn/4UGPgqkcGzgkGDQTB69GhefPHFN8x/jBo1ipNPPpnPfOYznHfeeQC8+OKLrF27llNOOYVZs2bx2GOPdTVeSTuPXfpW1l7fWvbFL36Rb37zm+vXp0+fzrRp03j/+9/P1KlTedvb3vam9zlr1iy+//3v89JLLzFx4kQeeugh+voG/m7HnDlz+NznPsfatWtZt24dl1xyCUceeeT6vvvttx/Tp09n4sSJvPOd7+SYY455w74/8YlPMHfu3PWXtH73u98xbdo0Xn75ZaqKr3/961vzNkjaCWXwmvXOZsqUKbXhH/t54oknOPzww3s0op3f1Vdfzdq1a/na1762xX18z3defs5hePX6P6NbKsnCqpqyuXabPXNIMhv4CPB8VU1sarcDhzVN9gP+paomJxkHPAE81Wx7uKo+3fQ5GvgO8BbgHuCvq6qSHADcDowDngFOr6rfbNGr1LA59dRTWbFiBQ899FCvhyJpB7Alcw7fAd4wE1lVZ1TV5KqaDNwJ3NWxecXgtsFgaFwHTAcmNI/Bfc4EHqyqCcCDzbq2s7lz57J48WJGjx7d66FI2gFsNhyq6ifAC0Nty8A3r50O3LqpfSQZA+xTVQ/XwHWs7wIfbTZPA25ulm/uqG+VnfUy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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    UniqueCarrier, \n",
    "    SUM(isDelayed_SQL(DepDelay)) AS NumDelays \n",
    "FROM \n",
    "    flightsView \n",
    "GROUP BY \n",
    "    UniqueCarrier\n",
    "\"\"\").toPandas().plot.bar();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+--------------+\n",
      "|UniqueCarrier|TotalTimeDelay|\n",
      "+-------------+--------------+\n",
      "|           XE|       47505.0|\n",
      "|           WN|      978547.0|\n",
      "+-------------+--------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Tiempo total de retrasos por transportador\n",
    "##\n",
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    UniqueCarrier, \n",
    "    SUM(DepDelay) AS TotalTimeDelay \n",
    "FROM \n",
    "    flightsView \n",
    "GROUP BY \n",
    "    UniqueCarrier\n",
    "\"\"\").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-------------------+\n",
      "|UniqueCarrier|AvgDistanceTraveled|\n",
      "+-------------+-------------------+\n",
      "|           XE|  738.0677880571909|\n",
      "|           WN|  623.7926638668864|\n",
      "+-------------+-------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Distancia recorrida por operador\n",
    "##\n",
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    UniqueCarrier, \n",
    "    avg(Distance) AS AvgDistanceTraveled \n",
    "FROM \n",
    "    flightsView \n",
    "GROUP BY \n",
    "    UniqueCarrier \n",
    "ORDER BY \n",
    "    AvgDistanceTraveled DESC\n",
    "\"\"\").show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retrasos por día de la semana"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+-------+-----+\n",
      "|DayOfWeek|delayed|Count|\n",
      "+---------+-------+-----+\n",
      "|        1|      0|11863|\n",
      "|        1|      1| 2656|\n",
      "|        2|      0|12911|\n",
      "|        2|      1| 1799|\n",
      "|        3|      1| 1434|\n",
      "|        3|      0|13260|\n",
      "|        4|      0|12271|\n",
      "|        4|      1| 4808|\n",
      "|        5|      1| 3514|\n",
      "|        5|      0|11003|\n",
      "|        6|      0| 9407|\n",
      "|        6|      1| 1878|\n",
      "|        7|      0| 9698|\n",
      "|        7|      1| 3498|\n",
      "+---------+-------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    DayOfWeek, \n",
    "    delayed,\n",
    "    COUNT(1) AS Count\n",
    "FROM\n",
    "    (SELECT\n",
    "        DayOfWeek,\n",
    "        isDelayed_SQL(DepDelay) AS delayed\n",
    "     FROM\n",
    "        flightsView)\n",
    "GROUP BY \n",
    "    DayOfWeek, \n",
    "    delayed\n",
    "ORDER BY \n",
    "    DayOfWeek\n",
    "\"\"\").show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retrasos por hora del día"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+-------+-----+\n",
      "|Hour|delayed|Count|\n",
      "+----+-------+-----+\n",
      "|   6|      1|  208|\n",
      "|   6|      0| 6126|\n",
      "|   7|      0| 7274|\n",
      "|   7|      1|  372|\n",
      "|   8|      1|  547|\n",
      "|   8|      0| 5956|\n",
      "|   9|      1|  761|\n",
      "|   9|      0| 5861|\n",
      "|  10|      1|  903|\n",
      "|  10|      0| 5783|\n",
      "|  11|      1|  986|\n",
      "|  11|      0| 5115|\n",
      "|  12|      0| 5174|\n",
      "|  12|      1| 1128|\n",
      "|  13|      0| 5225|\n",
      "|  13|      1| 1346|\n",
      "|  14|      0| 4434|\n",
      "|  14|      1| 1335|\n",
      "|  15|      0| 4818|\n",
      "|  15|      1| 1562|\n",
      "+----+-------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.sql(\"\"\"\n",
    "SELECT \n",
    "    Hour,\n",
    "    delayed, \n",
    "    COUNT(1) AS Count\n",
    "FROM \n",
    "(\n",
    "    SELECT\n",
    "        CAST(CRSDepTime / 100 AS INT) AS Hour, \n",
    "        isDelayed_SQL(DepDelay) AS delayed\n",
    "    FROM\n",
    "        flightsView\n",
    ")\n",
    "GROUP BY \n",
    "    Hour, \n",
    "    delayed\n",
    "ORDER BY \n",
    "    Hour\n",
    "\"\"\").show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Almacenamiento y lectura de tablas calculadas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Escritura de resultados en el HDFS con formato ORC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Se salva la tabla calculada al directorio tmp del HDFS.\n",
    "## Primero se borra si existe.\n",
    "##\n",
    "!hdfs dfs -rm -r -f /tmp/flightsWithDelays.orc\n",
    "\n",
    "## Se salva en formato ORC\n",
    "flightsWithDelays.write.format(\"orc\").save(\"/tmp/flightsWithDelays.orc\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 3 items\n",
      "-rw-r--r--   1 vagrant supergroup          0 2019-05-20 21:43 /tmp/flightsWithDelays.orc/_SUCCESS\n",
      "-rw-r--r--   1 vagrant supergroup     162174 2019-05-20 21:43 /tmp/flightsWithDelays.orc/part-00000-4d2e6e19-e865-4198-a9ac-656366eeeeb0-c000.snappy.orc\n",
      "-rw-r--r--   1 vagrant supergroup      69710 2019-05-20 21:43 /tmp/flightsWithDelays.orc/part-00001-4d2e6e19-e865-4198-a9ac-656366eeeeb0-c000.snappy.orc\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Contenido del directorio donde se salvó la tabla\n",
    "##\n",
    "!hdfs dfs -ls /tmp/flightsWithDelays.orc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Carga de los resultados desde el HDFS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Se lee la tabla calculada desde el HDFS\n",
    "##\n",
    "test = spark.read.format(\"orc\").load(\"/tmp/flightsWithDelays.orc\")\n",
    "\n",
    "## verifica la cantidad de registros.\n",
    "assert test.count() == flightsWithDelays.count(), print(\"Archivos con diferentes tamaños.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Salva el DataFrame como una tabla permamente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## La tabla queda guardada en la carpeta\n",
    "## spark-warehouse del directorio actual\n",
    "##\n",
    "!rm -rf spark-warehouse/flightswithdelaystbl\n",
    "flightsWithDelays.write.format(\"orc\").saveAsTable(\"flightswithdelaystbl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tablas almacenadas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+--------------------+-----------+\n",
      "|database|           tableName|isTemporary|\n",
      "+--------+--------------------+-----------+\n",
      "| default|flightswithdelaystbl|      false|\n",
      "|        |         flightsview|       true|\n",
      "+--------+--------------------+-----------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.sql(\"SHOW TABLES\").show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Consultas en un tabla permanente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+\n",
      "| Total|\n",
      "+------+\n",
      "|100000|\n",
      "+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## \n",
    "## Note que cuando la tabla está almacenada de forma\n",
    "## permanente no es necesario cargarla a la memoria\n",
    "## para poder usarla.\n",
    "##\n",
    "spark.sql(\"SELECT COUNT(1) AS Total from flightswithdelaystbl\").show()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+-----------+-----------+\n",
      "|database|  tableName|isTemporary|\n",
      "+--------+-----------+-----------+\n",
      "|        |flightsview|       true|\n",
      "+--------+-----------+-----------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## Se borran las tablas para limpiar el área\n",
    "## de trabajo.\n",
    "spark.sql(\"DROP TABLE flightswithdelaystbl\")\n",
    "spark.sql(\"SHOW TABLES\").show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Limpieza**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deleted /tmp/flights.csv\n"
     ]
    }
   ],
   "source": [
    "!hdfs dfs -rm /tmp/flights.csv"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc-autonumbering": false
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

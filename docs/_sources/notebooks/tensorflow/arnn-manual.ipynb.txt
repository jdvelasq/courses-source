{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modelo híbrido: Regresión Lineal + MLP\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objetivos de aprendizaje\n",
    "- Describir el modelo matemático, la operación y los casos de uso de un perceptrón multicapa\n",
    "- Implementar un perceptrón multicapa a través de Scikitlearn y TensorFlow\n",
    "- Aplicar la red implementada a un caso de regresión no lineal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema real"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desea construir un modelo de regresión no lineal para la siguiente muestra de 31 observaciones de $(x, y)$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "x = [1.8131, 0.0318, 1.5181, 0.2522, 0.2440, 1.4175, \n",
    "     1.9538, 1.1506, 1.5042, 1.0798, 1.0915, 0.3173, \n",
    "     1.8157, 1.3352, 1.1399, 0.1276, 0.6909, 0.6331, \n",
    "     0.8671, 0.5867, 1.9373, 1.5842, 0.5707, 0.5285, \n",
    "     1.8708, 1.5870, 1.3027, 1.2181, 0.2318, 0.3471, \n",
    "     0.4763]\n",
    "\n",
    "d = [5.1568, 0.4351, 3.8980, 0.9654, 0.7383, 3.4500, \n",
    "     5.4851, 2.4401, 3.8941, 2.1366, 2.4431, 0.8058, \n",
    "     5.2531, 3.3671, 2.6199, 0.8230, 1.7403, 1.2172, \n",
    "     1.9868, 1.2564, 5.4922, 4.0645, 1.2978, 1.2245, \n",
    "     5.2532, 4.1206, 3.1076, 2.7601, 5.2678, 5.5783, \n",
    "     5.8991]\n",
    "\n",
    "plt.plot(x, d, 'o')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema en términos de los datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desea construir un modelo no lineal que relacione las variables $x$ y $y$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metodología "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modelo matemático"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Muchos modelos nuevos pueden ser obtenidos por la combinación de modelos estadísticos y diferentes tipos de redes neuronales. En este caso, se usará un modelo llamaado ARNN (autoregressive Neuranl Nertwork) que es proveniente de la literatura de series de tiempo. En esta aplicación seria más apropiado llamarlo regresión + MLP."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El modelo general de regresión lineal puede especificarse como:\n",
    "\n",
    "$$y_t = \\phi^* + \\sum_i \\phi_i x_i +e_i$$\n",
    "\n",
    "donde $e_i$ es el término de error. Este modelo puede ser representado como un percpetrón con función de activación igual a la función de identidad.\n",
    "\n",
    "![assets/MulticapaLR.png](assets/MulticapaLR.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Por otra parte, un perceptrón multicapa con una capa oculta y que usa las funciones $\\sigma(\\cdot)$ para la activación de las capas oculta e identidad para la salida, puede especificarse como:\n",
    "\n",
    "$$y_t = \\phi^* + \\sum_{h} \\beta_h \\cdot \\sigma \\left(w^*_h + \\sum_{i} w_{i,h} x_i \\right) $$\n",
    "\n",
    "\n",
    "![assets/MulticapaMLP.png](assets/MulticapaMLP.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el modelo regresión+MLP, la especificación sería:\n",
    "\n",
    "$$y_t = \\phi^* + \\sum_i \\phi_i x_i +  \\sum_{h} \\beta_h \\cdot \\sigma \\left(w_h + \\sum_{i} w_{i,h} x_i \\right)  + e_i$$\n",
    "\n",
    "donde todos los parámetros serían estimados simultáneamente mediante la minimización del error.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Solución usando regresión lineal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SSE =  23.203339\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "##  Preparación\n",
    "##\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "##\n",
    "##  Datos\n",
    "##\n",
    "X_ = tf.constant(x)\n",
    "d_ = tf.constant(d)\n",
    "\n",
    "##\n",
    "## Info pronostico\n",
    "##\n",
    "Xpred = np.linspace(np.min(x), np.max(x), 50, dtype=np.float32)\n",
    "Xpred_ = tf.constant(Xpred)\n",
    "\n",
    "## parámetros\n",
    "w0 = tf.Variable(0.0)\n",
    "w1 = tf.Variable(1.0)\n",
    "\n",
    "## Define el modelo de regresión lineal\n",
    "m = tf.add(tf.multiply(X_, w1), w0)\n",
    "\n",
    "## Define la función de error\n",
    "# SSE = tf.reduce_sum(tf.square(d_ - m)) # sum of the squared errors\n",
    "SSE = tf.reduce_sum(tf.abs(d_ - m)) # sum of the squared errors\n",
    "\n",
    "## Inicializa el optimizador\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.0001).minimize(SSE)\n",
    "\n",
    "## Pronostico\n",
    "ypred = tf.add(tf.multiply(Xpred_, w1), w0)\n",
    "\n",
    "## estima el modelo\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    for i in range(1000):\n",
    "        sess.run(optimizer)\n",
    "    p = sess.run(ypred)\n",
    "    e = sess.run(SSE)    \n",
    "\n",
    "print('SSE = ', e)\n",
    "plt.plot(x, d, 'o')\n",
    "plt.plot(Xpred, p, '-')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Actividad.--** Compare el ajuste cuando usa la función SSE y cuando computa la suma de errores absolutos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Solución usando un MLP con activación lineal a la salida"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[H\u001b[2JSSE =  49.13365\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%clear\n",
    "##\n",
    "## Parametros\n",
    "##\n",
    "H = 3\n",
    "learning_rate=0.01\n",
    "max_iter=10000\n",
    "\n",
    "##\n",
    "## Datos\n",
    "##\n",
    "X = [[u] for u in x]\n",
    "N = len(X[0])\n",
    "P = len(X)\n",
    "\n",
    "X_ = tf.constant(X, dtype=np.float32)\n",
    "d_ = tf.constant(d, dtype=np.float32, shape=[len(d), 1])\n",
    "    \n",
    "##\n",
    "## Info pronostico\n",
    "##\n",
    "Xpred = np.linspace(np.min(x), np.max(x), 50, dtype=np.float32)\n",
    "Xpred = [[u] for u in Xpred]\n",
    "Xpred_ = tf.constant(Xpred)\n",
    "\n",
    " \n",
    "##\n",
    "## Parámetros\n",
    "##\n",
    "intercept = tf.Variable(0.1 * np.mean(d),            dtype=np.float32)\n",
    "WHOparams = tf.Variable(0.1 * np.random.randn(H, 1), dtype=np.float32)\n",
    "WIHparams = tf.Variable(0.1 * np.random.randn(N, H), dtype=np.float32)\n",
    "BHparams  = tf.Variable(0.1 * np.random.randn(H, 1), dtype=np.float32)\n",
    "\n",
    "##\n",
    "## Propagación de la señal\n",
    "##\n",
    "In_hidden = tf.add(tf.matmul(X_, WIHparams),\n",
    "                   tf.tile(tf.transpose(BHparams), [P, 1]))\n",
    "Out_hidden = tf.sigmoid(In_hidden)        \n",
    "MLP_output = tf.matmul(Out_hidden, WHOparams)\n",
    "model_output = tf.add(intercept, MLP_output)\n",
    "\n",
    "##\n",
    "## Función de error\n",
    "##\n",
    "SSE = tf.reduce_sum(tf.square(d_ - model_output)) # sum of the squared errors\n",
    "#SSE = tf.reduce_sum(tf.abs(d_ - model_output)) # sum of the squared errors\n",
    "\n",
    "##\n",
    "## Optimizador\n",
    "##\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(SSE)\n",
    "\n",
    "##\n",
    "## Pronostico\n",
    "##\n",
    "In_hidden = tf.add(tf.matmul(Xpred_, WIHparams),\n",
    "                   tf.tile(tf.transpose(BHparams), [len(Xpred), 1]))\n",
    "Out_hidden = tf.sigmoid(In_hidden)        \n",
    "MLP_output = tf.matmul(Out_hidden, WHOparams)\n",
    "ypred = tf.add(intercept, MLP_output)\n",
    "\n",
    "##\n",
    "## Ejecución \n",
    "##\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    for i in range(max_iter):\n",
    "        sess.run(optimizer)\n",
    "    p = sess.run(ypred)\n",
    "    e = sess.run(SSE) \n",
    "\n",
    "print('SSE = ', e)\n",
    "plt.plot(x, d, 'o')\n",
    "plt.plot(Xpred, p, '-')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Actividad.--** Compare el ajuste cuando usa la función SSE y cuando computa la suma de errores absolutos para distintos  valores de $H$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solución usando un LR+MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[H\u001b[2JSSE =  23.17302\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%clear\n",
    "##\n",
    "## Parametros\n",
    "##\n",
    "H = 3\n",
    "learning_rate=0.01\n",
    "max_iter=10000\n",
    "\n",
    "##\n",
    "## Datos\n",
    "##\n",
    "X = [[u] for u in x]\n",
    "N = len(X[0])\n",
    "P = len(X)\n",
    "\n",
    "X_ = tf.constant(X, dtype=np.float32)\n",
    "d_ = tf.constant(d, dtype=np.float32, shape=[len(d), 1])\n",
    "    \n",
    "##\n",
    "## Info pronostico\n",
    "##\n",
    "Xpred = np.linspace(np.min(x), np.max(x), 50, dtype=np.float32)\n",
    "Xpred = [[u] for u in Xpred]\n",
    "Xpred_ = tf.constant(Xpred)\n",
    "\n",
    "##\n",
    "## Parámetros\n",
    "##\n",
    "intercept = tf.Variable(0.1 * np.mean(d),            dtype=np.float32)\n",
    "LRparams  = tf.Variable(0.1 * np.random.randn(N, 1), dtype=np.float32)\n",
    "WHOparams = tf.Variable(0.1 * np.random.randn(H, 1), dtype=np.float32)\n",
    "WIHparams = tf.Variable(0.1 * np.random.randn(N, H), dtype=np.float32)\n",
    "BHparams  = tf.Variable(0.1 * np.random.randn(H, 1), dtype=np.float32)\n",
    "\n",
    "##\n",
    "## Propagación de la señal\n",
    "##\n",
    "LR_output = tf.matmul(X_, LRparams)\n",
    "LR_output = tf.add(intercept, LR_output)\n",
    "In_hidden = tf.add(tf.matmul(X_, WIHparams),\n",
    "                   tf.tile(tf.transpose(BHparams), [P, 1]))\n",
    "Out_hidden = tf.sigmoid(In_hidden)        \n",
    "MLP_output = tf.matmul(Out_hidden, WHOparams)\n",
    "model_output = tf.add(LR_output, MLP_output)\n",
    "\n",
    "##\n",
    "## Función de error\n",
    "##\n",
    "\n",
    "# SSE = tf.reduce_sum(tf.square(d_ - model_output)) # sum of the squared errors\n",
    "SSE = tf.reduce_sum(tf.abs(d_ - model_output)) # sum of the squared errors\n",
    "\n",
    "##\n",
    "## Optimizador\n",
    "##\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(SSE)\n",
    "\n",
    "##\n",
    "## Pronostico\n",
    "##\n",
    "LR_output = tf.matmul(Xpred_, LRparams)\n",
    "LR_output = tf.add(intercept, LR_output)\n",
    "In_hidden = tf.add(tf.matmul(Xpred_, WIHparams),\n",
    "                   tf.tile(tf.transpose(BHparams), [len(Xpred), 1]))\n",
    "Out_hidden = tf.sigmoid(In_hidden)        \n",
    "MLP_output = tf.matmul(Out_hidden, WHOparams)\n",
    "ypred = tf.add(LR_output, MLP_output)\n",
    "\n",
    "\n",
    "\n",
    "##\n",
    "## Ejecución \n",
    "##\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    for i in range(max_iter):\n",
    "        sess.run(optimizer)\n",
    "    p = sess.run(ypred)\n",
    "    e = sess.run(SSE) \n",
    "\n",
    "print('SSE = ', e)\n",
    "plt.plot(x, d, 'o')\n",
    "plt.plot(Xpred, p, '-')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Actividad.--** Compare el ajuste cuando usa la función SSE y cuando computa la suma de errores absolutos para distintos  valores de $H$."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

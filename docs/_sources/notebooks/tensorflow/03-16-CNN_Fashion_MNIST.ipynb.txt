{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convolutional neural network\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* *30 min* | Última modificación: Abril 6, 2020."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Basado en https://www.tensorflow.org/tutorials/keras/classification y Learn TensorFlow 2.0, P. Singh and A. Manure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "PW5pXrr6Xl9y"
   },
   "source": [
    "![Convolutional Neural Network Architecture](https://miro.medium.com/max/2510/1*vkQ0hXDaQv57sALXAJquxA.jpeg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "seckBTs0fE95"
   },
   "source": [
    "![Fashion MNIST dataset](https://raw.githubusercontent.com/zalandoresearch/fashion-mnist/master/doc/img/fashion-mnist-sprite.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importación de librerías"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.1.0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sb\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "\n",
    "print(tf.__version__)\n",
    "\n",
    "#\n",
    "# Establece el nivel de reporte en\n",
    "# pantalla de TensorFlow\n",
    "#\n",
    "import logging\n",
    "\n",
    "logger = tf.get_logger().setLevel(logging.ERROR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Carga y configuración del dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "#  Descarga de los datos\n",
    "#\n",
    "(\n",
    "    (train_images, train_labels),\n",
    "    (test_images, test_labels),\n",
    ") = keras.datasets.fashion_mnist.load_data()\n",
    "\n",
    "#\n",
    "#  Nombres de las clases\n",
    "#\n",
    "class_names = [  \n",
    "    \"T-shirt/top\", \n",
    "    \"Trouser\",  \n",
    "    \"Pullover\", \n",
    "    \"Dress\",  \n",
    "    \"Coat\",  \n",
    "    \"Sandal\", \n",
    "    \"Shirt\",  \n",
    "    \"Sneaker\", \n",
    "    \"Bag\", \n",
    "    \"Ankle boot\", \n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalización de las entradas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "#  Normalización del color al rango [0, 1]\n",
    "#\n",
    "train_images = train_images / 255.0\n",
    "test_images = test_images / 255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "uzyJ3LzLI2dK"
   },
   "outputs": [],
   "source": [
    "train_images = train_images.reshape((60000, 28, 28, 1))\n",
    "test_images = test_images.reshape((10000, 28, 28, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Especificación del modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "Convolutional_layer (Conv2D) (None, 26, 26, 50)        500       \n",
      "_________________________________________________________________\n",
      "Maxpooling_2D (MaxPooling2D) (None, 13, 13, 50)        0         \n",
      "_________________________________________________________________\n",
      "Flatten (Flatten)            (None, 8450)              0         \n",
      "_________________________________________________________________\n",
      "Hidden_layer (Dense)         (None, 50)                422550    \n",
      "_________________________________________________________________\n",
      "Output_layer (Dense)         (None, 10)                510       \n",
      "=================================================================\n",
      "Total params: 423,560\n",
      "Trainable params: 423,560\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "#  Configuración de las capas\n",
    "#\n",
    "model = keras.Sequential(\n",
    "    [\n",
    "        keras.layers.Conv2D(50, (3, 3), activation='relu', input_shape=(28, 28, 1), name='Convolutional_layer'),\n",
    "        keras.layers.MaxPooling2D((2, 2), name='Maxpooling_2D'),\n",
    "        keras.layers.Flatten(name='Flatten'),\n",
    "        keras.layers.Dense(50, activation='relu', name='Hidden_layer'),\n",
    "        keras.layers.Dense(10, activation='softmax', name='Output_layer'),\n",
    "    ]\n",
    ")\n",
    "\n",
    "#\n",
    "# Características del modelo creado\n",
    "#\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compilación del modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(\n",
    "    optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Entrenamiento del modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 374
    },
    "colab_type": "code",
    "id": "_irVQYjSmX7G",
    "outputId": "1cebddd6-8f46-4890-e1d8-0b7106ba9166"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples\n",
      "Epoch 1/10\n",
      "60000/60000 [==============================] - 22s 370us/sample - loss: 0.3939 - accuracy: 0.8597\n",
      "Epoch 2/10\n",
      "60000/60000 [==============================] - 21s 355us/sample - loss: 0.2717 - accuracy: 0.9025\n",
      "Epoch 3/10\n",
      "60000/60000 [==============================] - 22s 369us/sample - loss: 0.2275 - accuracy: 0.9175\n",
      "Epoch 4/10\n",
      "60000/60000 [==============================] - 22s 359us/sample - loss: 0.1987 - accuracy: 0.9273\n",
      "Epoch 5/10\n",
      "60000/60000 [==============================] - 25s 422us/sample - loss: 0.1703 - accuracy: 0.9372\n",
      "Epoch 6/10\n",
      "60000/60000 [==============================] - 29s 476us/sample - loss: 0.1500 - accuracy: 0.9446\n",
      "Epoch 7/10\n",
      "60000/60000 [==============================] - 33s 549us/sample - loss: 0.1301 - accuracy: 0.9521\n",
      "Epoch 8/10\n",
      "60000/60000 [==============================] - 31s 515us/sample - loss: 0.1138 - accuracy: 0.9582\n",
      "Epoch 9/10\n",
      "60000/60000 [==============================] - 28s 473us/sample - loss: 0.0999 - accuracy: 0.9630\n",
      "Epoch 10/10\n",
      "60000/60000 [==============================] - 27s 450us/sample - loss: 0.0865 - accuracy: 0.9680\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7ff0912986a0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_images, train_labels, epochs=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BXA1brtrmgdI"
   },
   "source": [
    "## Evaluación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "bRISUog8RNJF",
    "outputId": "e479dea2-169a-4233-f559-bf141fc1cc39"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000/60000 [==============================] - 12s 195us/sample - loss: 0.0744 - accuracy: 0.9722\n",
      "loss: 0.074\n",
      "accuracy: 0.972\n"
     ]
    }
   ],
   "source": [
    "results = model.evaluate(train_images, train_labels)\n",
    "\n",
    "for name, value in zip(model.metrics_names, results):\n",
    "    print(\"%s: %.3f\" % (name, value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "2KNIAUSEFgPO",
    "outputId": "2126db4d-637e-4d5a-f001-479e5c3539e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 3s 310us/sample - loss: 0.3271 - accuracy: 0.9127\n",
      "loss: 0.327\n",
      "accuracy: 0.913\n"
     ]
    }
   ],
   "source": [
    "results = model.evaluate(test_images, test_labels)\n",
    "\n",
    "for name, value in zip(model.metrics_names, results):\n",
    "    print(\"%s: %.3f\" % (name, value))"
   ]
  }
 ],
 "metadata": {
  "accelerator": "TPU",
  "colab": {
   "name": "CNN_Fashion_MNIST.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Diagnóstico del cáncer de mama usando sparklyr\n",
    "===\n",
    "\n",
    "* *30 min* | Última modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este documento se ilustra la construcción de modelos de clasificación usando Sparklyr. El tutorial está centrado en el uso del lenguaje y se supone suficiencia del lector en el uso e interpretación de algoritmos de clasificación. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desea determinar si una masa mamaria es un tumor benigno o maligno, a partir de las medidas obtenidas de imágenes digitalizadas de la aspiración con una aguja fina. Los valores representan las características de los núcleos celulares presentes en la imagen digital. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se tiene una muestra de 569 ejemplos de resultados de las biopsias. Cada registro contiene 32 variables, las cuales corresponden a tres medidas (media, desviación estándar, peor caso) de diez características diferentes (radius, texture, ...).\n",
    "\n",
    "* Identification number\n",
    "* Cancer diagnosis (\"M\" para maligno y \"B\" para benigno)\n",
    "* Radius\n",
    "* Texture\n",
    "* Perimeter\n",
    "* Area\n",
    "* Smoothness\n",
    "* Compactness\n",
    "* Concavity\n",
    "* Concave points\n",
    "* Symmetry\n",
    "* Fractal dimension\n",
    "\n",
    "En términos de los datos, se desea pronosticar si una masa es benigna o maligna (clase B o M) a partir de las 30 variables.\n",
    "\n",
    "Fuente de los datos: https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solución"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Esta función se usará para ejecutar comandos en el \n",
    "## sistema operativo y capturar la salida.\n",
    "##\n",
    "systemp <- function(command) cat(system(command, intern = TRUE), sep = '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 1 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>spark</th><th scope=col>hadoop</th><th scope=col>dir</th></tr>\n",
       "\t<tr><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>2.4.3</td><td>2.7</td><td>/home/vagrant/spark/spark-2.4.3-bin-hadoop2.7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 1 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       " spark & hadoop & dir\\\\\n",
       " <chr> & <chr> & <chr>\\\\\n",
       "\\hline\n",
       "\t 2.4.3 & 2.7 & /home/vagrant/spark/spark-2.4.3-bin-hadoop2.7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 1 × 3\n",
       "\n",
       "| spark &lt;chr&gt; | hadoop &lt;chr&gt; | dir &lt;chr&gt; |\n",
       "|---|---|---|\n",
       "| 2.4.3 | 2.7 | /home/vagrant/spark/spark-2.4.3-bin-hadoop2.7 |\n",
       "\n"
      ],
      "text/plain": [
       "  spark hadoop dir                                          \n",
       "1 2.4.3 2.7    /home/vagrant/spark/spark-2.4.3-bin-hadoop2.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "[1] ‘2.4.3’"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "library(sparklyr)\n",
    "library(dplyr)\n",
    "spark_installed_versions()\n",
    "sc <- spark_connect(master='local', spark_home='/home/vagrant/spark/spark-2.4.3-bin-hadoop2.7')\n",
    "spark_version(sc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploración"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se mueve el archivo de la máquina local a sistema HDFS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message:\n",
      "“running command 'hdfs dfs -copyFromLocal wisc_bc_data.csv /tmp/wisc_bc_data.csv' had status 1”"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "## copia el archivo al HDFS\n",
    "systemp('hdfs dfs -copyFromLocal wisc_bc_data.csv /tmp/wisc_bc_data.csv') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[38;5;246m# Source: spark<?> [?? x 32]\u001b[39m\n",
       "      id diagnosis radius_mean texture_mean perimeter_mean area_mean\n",
       "   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m           \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m          \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m     \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
       "\u001b[38;5;250m1\u001b[39m 8.42\u001b[38;5;246me\u001b[39m5 M                18.0         10.4          123.      \u001b[4m1\u001b[24m001 \n",
       "\u001b[38;5;250m2\u001b[39m 8.43\u001b[38;5;246me\u001b[39m5 M                20.6         17.8          133.      \u001b[4m1\u001b[24m326 \n",
       "\u001b[38;5;250m3\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                19.7         21.2          130       \u001b[4m1\u001b[24m203 \n",
       "\u001b[38;5;250m4\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                11.4         20.4           77.6      386.\n",
       "\u001b[38;5;250m5\u001b[39m 8.44\u001b[38;5;246me\u001b[39m7 M                20.3         14.3          135.      \u001b[4m1\u001b[24m297 \n",
       "\u001b[38;5;250m6\u001b[39m 8.44\u001b[38;5;246me\u001b[39m5 M                12.4         15.7           82.6      477.\n",
       "\u001b[38;5;246m# … with 26 more variables: smoothness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concavity_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, texture_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   perimeter_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, smoothness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   compactness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   symmetry_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, fractal_dimension_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   texture_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, perimeter_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   smoothness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concave_points_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m\u001b[39m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df <- \n",
    "spark_read_csv(sc,                       ## spark_connection\n",
    "               'wisc_bc_data',           ## nombre de la tabla\n",
    "               '/tmp/wisc_bc_data.csv')  ## ubicación del archivo\n",
    "                                         ## en el sistema hdfs\n",
    "head(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[38;5;246m# Source: spark<?> [?? x 1]\u001b[39m\n",
       "      n\n",
       "  \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
       "\u001b[38;5;250m1\u001b[39m   569"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Cantidad de registros leidos\n",
    "##\n",
    "count(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Regresión Logística"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[38;5;246m# Source: spark<?> [?? x 40]\u001b[39m\n",
       "      id diagnosis radius_mean texture_mean perimeter_mean area_mean\n",
       "   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m           \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m          \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m     \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
       "\u001b[38;5;250m1\u001b[39m 8.42\u001b[38;5;246me\u001b[39m5 M                18.0         10.4          123.      \u001b[4m1\u001b[24m001 \n",
       "\u001b[38;5;250m2\u001b[39m 8.43\u001b[38;5;246me\u001b[39m5 M                20.6         17.8          133.      \u001b[4m1\u001b[24m326 \n",
       "\u001b[38;5;250m3\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                19.7         21.2          130       \u001b[4m1\u001b[24m203 \n",
       "\u001b[38;5;250m4\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                11.4         20.4           77.6      386.\n",
       "\u001b[38;5;250m5\u001b[39m 8.44\u001b[38;5;246me\u001b[39m7 M                20.3         14.3          135.      \u001b[4m1\u001b[24m297 \n",
       "\u001b[38;5;250m6\u001b[39m 8.44\u001b[38;5;246me\u001b[39m5 M                12.4         15.7           82.6      477.\n",
       "\u001b[38;5;246m# … with 34 more variables: smoothness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concavity_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, texture_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   perimeter_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, smoothness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   compactness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   symmetry_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, fractal_dimension_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   texture_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, perimeter_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   smoothness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concave_points_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, features \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, label \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, raw_LR \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m,\n",
       "#   prob_LR \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, LR \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, predicted_label \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m, probability_B \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   probability_M \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m\u001b[39m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se especifica el modelo de la forma usual\n",
    "##\n",
    "model <- ml_logistic_regression(\n",
    "    df, \n",
    "    diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + \n",
    "                smoothness_mean + compactness_mean + concavity_mean + \n",
    "                concave_points_mean + symmetry_mean + \n",
    "                fractal_dimension_mean + radius_se + texture_se + \n",
    "                perimeter_se + area_se + smoothness_se + compactness_se + \n",
    "                concavity_se + concave_points_se + symmetry_se + \n",
    "                fractal_dimension_se + radius_worst + texture_worst + \n",
    "                perimeter_worst + area_worst + smoothness_worst + \n",
    "                compactness_worst + concavity_worst + \n",
    "                concave_points_worst + symmetry_worst + \n",
    "                fractal_dimension_worst,\n",
    "    fit_intercept = TRUE,\n",
    "    elastic_net_param = 0, \n",
    "    reg_param = 0, \n",
    "    max_iter = 100,\n",
    "    prediction_col = \"LR\", \n",
    "    probability_col = \"prob_LR\",\n",
    "    raw_prediction_col = \"raw_LR\")\n",
    "\n",
    "# Prediction\n",
    "fitted_LR <- ml_predict(model, df)\n",
    "head(fitted_LR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random forest classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[38;5;246m# Source: spark<?> [?? x 40]\u001b[39m\n",
       "      id diagnosis radius_mean texture_mean perimeter_mean area_mean\n",
       "   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m           \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m          \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m     \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
       "\u001b[38;5;250m1\u001b[39m 8.42\u001b[38;5;246me\u001b[39m5 M                18.0         10.4          123.      \u001b[4m1\u001b[24m001 \n",
       "\u001b[38;5;250m2\u001b[39m 8.43\u001b[38;5;246me\u001b[39m5 M                20.6         17.8          133.      \u001b[4m1\u001b[24m326 \n",
       "\u001b[38;5;250m3\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                19.7         21.2          130       \u001b[4m1\u001b[24m203 \n",
       "\u001b[38;5;250m4\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                11.4         20.4           77.6      386.\n",
       "\u001b[38;5;250m5\u001b[39m 8.44\u001b[38;5;246me\u001b[39m7 M                20.3         14.3          135.      \u001b[4m1\u001b[24m297 \n",
       "\u001b[38;5;250m6\u001b[39m 8.44\u001b[38;5;246me\u001b[39m5 M                12.4         15.7           82.6      477.\n",
       "\u001b[38;5;246m# … with 34 more variables: smoothness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concavity_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, texture_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   perimeter_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, smoothness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   compactness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   symmetry_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, fractal_dimension_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   texture_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, perimeter_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   smoothness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concave_points_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, features \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, label \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, raw_RF \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m,\n",
       "#   prob_RF \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, RF \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, predicted_label \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m, probability_B \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   probability_M \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m\u001b[39m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se especifica el modelo de la forma usual\n",
    "##\n",
    "model <- ml_random_forest_classifier(\n",
    "    df, \n",
    "    diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + \n",
    "                smoothness_mean + compactness_mean + concavity_mean + \n",
    "                concave_points_mean + symmetry_mean + \n",
    "                fractal_dimension_mean + radius_se + texture_se + \n",
    "                perimeter_se + area_se + smoothness_se + compactness_se + \n",
    "                concavity_se + concave_points_se + symmetry_se + \n",
    "                fractal_dimension_se + radius_worst + texture_worst + \n",
    "                perimeter_worst + area_worst + smoothness_worst + \n",
    "                compactness_worst + concavity_worst + \n",
    "                concave_points_worst + symmetry_worst + \n",
    "                fractal_dimension_worst,\n",
    "    num_trees = 20,\n",
    "    max_depth = 5,\n",
    "    prediction_col = \"RF\",\n",
    "    probability_col = \"prob_RF\",\n",
    "    raw_prediction_col = \"raw_RF\")\n",
    "\n",
    "# Prediction\n",
    "fitted_RF <- ml_predict(model, df)\n",
    "head(fitted_RF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Gradient-boosted tree classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[38;5;246m# Source: spark<?> [?? x 40]\u001b[39m\n",
       "      id diagnosis radius_mean texture_mean perimeter_mean area_mean\n",
       "   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m           \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m          \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m     \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
       "\u001b[38;5;250m1\u001b[39m 8.42\u001b[38;5;246me\u001b[39m5 M                18.0         10.4          123.      \u001b[4m1\u001b[24m001 \n",
       "\u001b[38;5;250m2\u001b[39m 8.43\u001b[38;5;246me\u001b[39m5 M                20.6         17.8          133.      \u001b[4m1\u001b[24m326 \n",
       "\u001b[38;5;250m3\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                19.7         21.2          130       \u001b[4m1\u001b[24m203 \n",
       "\u001b[38;5;250m4\u001b[39m 8.43\u001b[38;5;246me\u001b[39m7 M                11.4         20.4           77.6      386.\n",
       "\u001b[38;5;250m5\u001b[39m 8.44\u001b[38;5;246me\u001b[39m7 M                20.3         14.3          135.      \u001b[4m1\u001b[24m297 \n",
       "\u001b[38;5;250m6\u001b[39m 8.44\u001b[38;5;246me\u001b[39m5 M                12.4         15.7           82.6      477.\n",
       "\u001b[38;5;246m# … with 34 more variables: smoothness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concavity_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_mean \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, texture_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   perimeter_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, smoothness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   compactness_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concave_points_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   symmetry_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, fractal_dimension_se \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, radius_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   texture_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, perimeter_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, area_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   smoothness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, compactness_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, concavity_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   concave_points_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, symmetry_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   fractal_dimension_worst \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, features \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, label \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
       "#   raw_GBT \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, prob_GBT \u001b[3m\u001b[38;5;246m<list>\u001b[38;5;246m\u001b[23m, GBT \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, predicted_label \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m,\n",
       "#   probability_B \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, probability_M \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m\u001b[39m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se especifica el modelo de la forma usual\n",
    "##\n",
    "model <- ml_gbt_classifier(\n",
    "    df, \n",
    "    diagnosis ~ radius_mean + texture_mean + perimeter_mean + area_mean + \n",
    "                smoothness_mean + compactness_mean + concavity_mean + \n",
    "                concave_points_mean + symmetry_mean + \n",
    "                fractal_dimension_mean + radius_se + texture_se + \n",
    "                perimeter_se + area_se + smoothness_se + compactness_se + \n",
    "                concavity_se + concave_points_se + symmetry_se + \n",
    "                fractal_dimension_se + radius_worst + texture_worst + \n",
    "                perimeter_worst + area_worst + smoothness_worst + \n",
    "                compactness_worst + concavity_worst + \n",
    "                concave_points_worst + symmetry_worst + \n",
    "                fractal_dimension_worst,\n",
    "    max_iter = 20, \n",
    "    max_depth = 5,\n",
    "    prediction_col = \"GBT\",\n",
    "    probability_col = \"prob_GBT\",\n",
    "    raw_prediction_col = \"raw_GBT\")\n",
    "\n",
    "# Prediction\n",
    "fitted_GBT <- ml_predict(model, df)\n",
    "head(fitted_GBT)"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "ir"
  },
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.4.4"
  },
  "nteract": {
   "version": "0.8.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

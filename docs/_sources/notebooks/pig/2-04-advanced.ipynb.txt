{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Programación Avanzada\n",
    "==="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext bigdata\n",
    "%pig_init"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## COGROUP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing data0.tsv\n"
     ]
    }
   ],
   "source": [
    "%%writefile data0.tsv\n",
    "A\t10\t1\n",
    "B\t20\t2\n",
    "C\t30\t3\n",
    "D\t40\t4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing data1.tsv\n"
     ]
    }
   ],
   "source": [
    "%%writefile data1.tsv\n",
    "A\t50\t5\n",
    "B\t60\t6\n",
    "C\t70\t7\n",
    "D\t80\t8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(A,{(A,10,1)},{(A,50,5)})\n",
      "(B,{(B,20,2)},{(B,60,6)})\n",
      "(C,{(C,30,3)},{(C,70,7)})\n",
      "(D,{(D,40,4)},{(D,80,8)})\n"
     ]
    }
   ],
   "source": [
    "%%pig\n",
    "u = LOAD 'data0.tsv' AS (f1:CHARARRAY, f2:INT, f3:INT);\n",
    "v = LOAD 'data1.tsv' AS (f1:CHARARRAY, f4:INT, f5:INT);\n",
    "s = COGROUP u BY f1, v BY f1;\n",
    "DUMP s;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## UNION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(A,50,5)\n",
      "(B,60,6)\n",
      "(C,70,7)\n",
      "(D,80,8)\n",
      "(A,10,1)\n",
      "(B,20,2)\n",
      "(C,30,3)\n",
      "(D,40,4)\n"
     ]
    }
   ],
   "source": [
    "%%pig\n",
    "s = UNION u, v;\n",
    "DUMP s;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CROSS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(D,40,4,D,80,8)\n",
      "(D,40,4,C,70,7)\n",
      "(D,40,4,B,60,6)\n",
      "(D,40,4,A,50,5)\n",
      "(C,30,3,D,80,8)\n",
      "(C,30,3,C,70,7)\n",
      "(C,30,3,B,60,6)\n",
      "(C,30,3,A,50,5)\n",
      "(B,20,2,D,80,8)\n",
      "(B,20,2,C,70,7)\n",
      "(B,20,2,B,60,6)\n",
      "(B,20,2,A,50,5)\n",
      "(A,10,1,D,80,8)\n",
      "(A,10,1,C,70,7)\n",
      "(A,10,1,B,60,6)\n",
      "(A,10,1,A,50,5)\n"
     ]
    }
   ],
   "source": [
    "%%pig\n",
    "s = CROSS u, v;\n",
    "DUMP s;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RANK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1,A,10,1)\n",
      "(2,B,20,2)\n",
      "(3,C,30,3)\n",
      "(4,D,40,4)\n"
     ]
    }
   ],
   "source": [
    "%%pig\n",
    "s = RANK u BY f2;\n",
    "DUMP s;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## STREAM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Revise la documentación sobre este operador."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===== Task Information Header =====\n",
      "Command: tail -n 2 (stdin-org.apache.pig.builtin.PigStreaming/stdout-org.apache.pig.builtin.PigStreaming)\n",
      "Start time: Sat Oct 20 13:48:17 COT 2018\n",
      "PigSplit contains 1 wrappedSplits.\n",
      "Input-split: file=file:/tmp/temp-394584878/tmp-1675619958/part-r-00000 start-offset=0 length=78\n",
      "=====          * * *          =====\n",
      "===== Task Information Footer =====\n",
      "End time: Sat Oct 20 13:48:17 COT 2018\n",
      "Exit code: 0\n",
      "Input records: 4\n",
      "Input bytes: 704 bytes (stdin using org.apache.pig.builtin.PigStreaming)\n",
      "Output records: 2\n",
      "Output bytes: 432 bytes (stdout using org.apache.pig.builtin.PigStreaming)\n",
      "=====          * * *          =====\n",
      "(3,C,30,3)\n",
      "(4,D,40,4)\n"
     ]
    }
   ],
   "source": [
    "%%pig\n",
    "w = STREAM s THROUGH  `tail -n 2 `;\n",
    "DUMP w;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CUBE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(A,10,1)\n",
      "(B,20,2)\n",
      "(C,30,3)\n",
      "(D,40,4)\n"
     ]
    }
   ],
   "source": [
    "%%pig \n",
    "DUMP u;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((A,10),{(A,10,1)})\n",
      "((A,),{(A,,1)})\n",
      "((B,20),{(B,20,2)})\n",
      "((B,),{(B,,2)})\n",
      "((C,30),{(C,30,3)})\n",
      "((C,),{(C,,3)})\n",
      "((D,40),{(D,40,4)})\n",
      "((D,),{(D,,4)})\n",
      "((,10),{(,10,1)})\n",
      "((,20),{(,20,2)})\n",
      "((,30),{(,30,3)})\n",
      "((,40),{(,40,4)})\n",
      "((,),{(,,4),(,,3),(,,1),(,,2)})\n"
     ]
    }
   ],
   "source": [
    "%%pig \n",
    "s = CUBE u BY cube(f1, f2);\n",
    "DUMP s;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EXPLAIN\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Revise la documentación sobre este operador."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ILLUSTRATE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(C,30,3)\n",
      "------------------------------------------------------\n",
      "| u     | f1:chararray     | f2:int     | f3:int     | \n",
      "------------------------------------------------------\n",
      "|       | C                | 30         | 3          | \n",
      "|       | A                | 10         | 1          | \n",
      "------------------------------------------------------\n",
      "---------------------------------------------------------\n",
      "| cube     | f1:chararray     | f2:int     | f3:int     | \n",
      "---------------------------------------------------------\n",
      "|          | C                | 30         | 3          | \n",
      "|          | C                |            | 3          | \n",
      "|          |                  | 30         | 3          | \n",
      "|          |                  |            | 3          | \n",
      "|          | A                | 10         | 1          | \n",
      "|          | A                |            | 1          | \n",
      "|          |                  | 10         | 1          | \n",
      "|          |                  |            | 1          | \n",
      "---------------------------------------------------------\n",
      "---------------------------------------------------------------------------------------------------------------------------\n",
      "| s     | group:tuple(f1:chararray,f2:int)             | cube:bag{:tuple(f1:chararray,f2:int,f3:int)}                     | \n",
      "---------------------------------------------------------------------------------------------------------------------------\n",
      "|       | (A, 10)                                      | {(A, 10, 1)}                                                     | \n",
      "|       | (A, )                                        | {(A, , 1)}                                                       | \n",
      "|       | (C, 30)                                      | {(C, 30, 3)}                                                     | \n",
      "|       | (C, )                                        | {(C, , 3)}                                                       | \n",
      "|       | (, 10)                                       | {(, 10, 1)}                                                      | \n",
      "|       | (, 30)                                       | {(, 30, 3)}                                                      | \n",
      "|       | (, )                                         | {(, , 3), (, , 1)}                                               | \n",
      "---------------------------------------------------------------------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%pig\n",
    "ILLUSTRATE s;"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SGDRegressor y SGDClassifier usando sklearn\n",
    "====\n",
    "\n",
    "* *30 min* | Última modificación: Marzo 20, 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SGDRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Este es un modelo lineal de la forma:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$y = w_0 + \\sum_i w_i x_i$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "con las siguientes características:\n",
    "\n",
    "\n",
    "* Los parámetros son estimados usando el gradiente descendente estocástico computado sobre cada muestra del patrón de entrenamiento.\n",
    "\n",
    "\n",
    "* Permite usar diferentes funciones de pérdida:\n",
    "\n",
    "  -  `squared_loss`: $$L(d, y) = (d - y)^2$$\n",
    "  \n",
    "  - `huber`: $$L(d, y)=\n",
    "\\begin{cases}\n",
    "\\frac{1}{2}[d - y]^2 & \\text{Si } |d-y| \\le \\epsilon \\\\\n",
    "\\\\\n",
    "\\epsilon |d-y|-\\frac{1}{2}\\epsilon^2 & \\text{en cualquier otro caso}\n",
    "\\end{cases}\n",
    "$$ \n",
    "\n",
    "  - `epsilon_insensitive`: $$L(d, y)=\n",
    "\\begin{cases}\n",
    "0 & \\text{Si } |d-y| \\le \\epsilon \\\\\n",
    "\\\\\n",
    "\\epsilon |d-y| - \\epsilon & \\text{en cualquier otro caso}\n",
    "\\end{cases}\n",
    "$$ \n",
    "  \n",
    "  - `squared_epsilon_insensitive`: $$L(d, y)= [\\text{epsilon_insensitive}(d, y)]^2$$ \n",
    "  \n",
    "  \n",
    "* Se pueden especificar diferentes funciones de penalización (ridge, LASSO o ElasticNet).\n",
    "\n",
    "\n",
    "* El intercepto del modelo ($w_0$) puede ser eliminado del modelo.\n",
    "\n",
    "\n",
    "* Pueden especificarse diferentes esquemas para la tasa de aprendizaje (constante, optima, escala inversa, adaptativa).\n",
    "\n",
    "\n",
    "* El algoritmo de entreamiento puede usar Early Stopping para finalizar el proceso de optimización.\n",
    "\n",
    "\n",
    "* El modelo puede usar los parametros computados sobre el último patrón o como un promedio."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se ejemplifica el uso de `SGDRegressor` para realizar una regressión lineal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\n",
    "#  Generación de datos artificiales\n",
    "#\n",
    "\n",
    "from sklearn.datasets import make_regression\n",
    "\n",
    "X, y = make_regression(\n",
    "    n_samples=100,         #\n",
    "    n_features=1,          #\n",
    "    n_informative=1,       #\n",
    "    bias=0.0,              # intercepto\n",
    "    effective_rank=None,   # numero de vectores singulares para explicar los datos\n",
    "    tail_strength=0.9,     # ? importancia relativa de las colas\n",
    "    noise=10.0,            #\n",
    "    shuffle=False,         # ?\n",
    "    coef=False,            # ?coeficientes de la regresion \n",
    "    random_state=12356)    #\n",
    "\n",
    "plt.scatter(X, y);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\n",
    "# Uso de SGDRegressor\n",
    "#\n",
    "\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "\n",
    "#\n",
    "# Crea el modelo y su parametrización\n",
    "#\n",
    "sgdRegressor = SGDRegressor(\n",
    "    loss='squared_loss',         # 'squared_loss', 'huber', 'epsilon_insensitive', 'squared_epsilon_insensitive'\n",
    "    penalty='l2',                # 'none', 'l2', 'l1', 'elasticnet'\n",
    "    alpha=0.0001,                # factor regularización\n",
    "    l1_ratio=0.15,               # ElasticNet\n",
    "    fit_intercept=True,          #\n",
    "    max_iter=1000,               #\n",
    "    tol=0.001,                   # \n",
    "    shuffle=True,                # ?datos de entrenamiento\n",
    "    verbose=0,                   #\n",
    "    epsilon=0.1,                 # epsilon-insensitive loss function\n",
    "    random_state=None,           #\n",
    "    learning_rate='invscaling',  # 'constant', 'optimal', 'invscaling', 'adaptive'\n",
    "    eta0=0.01,                   # leaning_rate = constant\n",
    "    power_t=0.25,                # inverse scaling learning rate\n",
    "    early_stopping=False,        #\n",
    "    validation_fraction=0.1,     #\n",
    "    n_iter_no_change=5,          #\n",
    "    warm_start=False,            #\n",
    "    average=False)               # average weights\n",
    "\n",
    "#\n",
    "# Entrenamiento del modelo\n",
    "#\n",
    "sgdRegressor.fit(X, y)\n",
    "\n",
    "# \n",
    "# Grafico de la muestra para entrenamiento\n",
    "#\n",
    "plt.scatter(X, y)\n",
    "\n",
    "#\n",
    "# Gráfico del pronóstico usando SGDRegressor\n",
    "#\n",
    "X_pred = np.linspace(start=-2, stop=4, num=50)\n",
    "X_pred = [[x] for x in X_pred]\n",
    "y_pred = sgdRegressor.predict(X_pred)\n",
    "plt.plot(X_pred, y_pred, '-', linewidth = 4, color='orange');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([44.19702465])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgdRegressor.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.32086051])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgdRegressor.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SGDClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Permite estimar un clasificador lineal con las siguientes características (se usa +/- 1 para representar las clases):\n",
    "\n",
    "\n",
    "* Los parámetros son estimados usando el gradiente descendente estocástico computado sobre cada muestra del patrón de entrenamiento.\n",
    "\n",
    "\n",
    "* Permite usar diferentes funciones de pérdida:\n",
    "\n",
    "  - `hinge`: $$L(d,y)=\\max (0, 1 - d \\times y)$$\n",
    "\n",
    "  - `log`: (logistica) $$L(d, y) = -d \\log (y) - (1-d) \\log(1 - y)$$\n",
    "  \n",
    "  - `modified_huber`: $$L(d, y)=\n",
    "\\begin{cases}\n",
    "\\max(0, 1 - d \\times y) & \\text{Si } $d \\times y \\ge -1$ \\\\\n",
    "\\\\\n",
    "-4 \\times d \\times y & \\text{en cualquier otro caso}\n",
    "\\end{cases}\n",
    "$$ \n",
    "\n",
    "  - `squared hinge`: $$L(d,y)=[\\max (0, 1 - d \\times y)]^2$$ \n",
    "  \n",
    "  - `perceptron`: $$L(d, y)= d - y$$ \n",
    "    \n",
    "  - Cualquiera de las funciones usandas con `SGDRegressor`.\n",
    "  \n",
    "  \n",
    "* Se pueden especificar diferentes funciones de penalización (ridge, LASSO o ElasticNet).\n",
    "\n",
    "\n",
    "* El intercepto del modelo ($w_0$) puede ser eliminado del modelo.\n",
    "\n",
    "\n",
    "* Pueden especificarse diferentes esquemas para la tasa de aprendizaje (constante, optima, escala inversa, adaptativa).\n",
    "\n",
    "\n",
    "* El algoritmo de entreamiento puede usar Early Stopping para finalizar el proceso de optimización.\n",
    "\n",
    "\n",
    "* El modelo puede usar los parametros computados sobre el último patrón o como un promedio."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se ejemplifica el uso de `SGDClassifier` para construir un classificador lineal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\n",
    "#  Generación de datos artificiales\n",
    "#\n",
    "\n",
    "from sklearn.datasets import make_blobs\n",
    "\n",
    "NPOINTS = 150\n",
    "\n",
    "X, d = make_blobs(\n",
    "    n_samples=NPOINTS, \n",
    "    n_features=2,\n",
    "    centers=3,\n",
    "    cluster_std=0.8, \n",
    "    shuffle=False,  \n",
    "    random_state=12345)\n",
    "\n",
    "plt.scatter(X[:50,0], X[:50,1], color='red')\n",
    "plt.scatter(X[50:100,0], X[50:100,1], color='blue')\n",
    "plt.scatter(X[100:,0], X[100:,1], color='green')\n",
    "plt.gca().set_aspect('equal', adjustable='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
       "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
       "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
       "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l2',\n",
       "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
       "              validation_fraction=0.1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import SGDClassifier\n",
    "\n",
    "#\n",
    "# Crea el modelo y su parametrización\n",
    "#\n",
    "sgdClassifier = SGDClassifier(\n",
    "    loss='hinge',                # 'hinge', 'log', 'modified_huber', 'squared_hinge', \n",
    "                                 # 'perceptron', 'squared_loss', 'huber', 'epsilon_insensitive', \n",
    "                                 # 'squared_epsilon_insensitive'\n",
    "    penalty='l2',                # 'none', 'l2', 'l1', or 'elasticnet'\n",
    "    alpha=0.0001,                # regularization\n",
    "    l1_ratio=0.15,               # Elastic Net\n",
    "    fit_intercept=True,          #\n",
    "    max_iter=1000,               #\n",
    "    tol=0.001,                   #\n",
    "    shuffle=True,                # ?shuffle training data after each epoch\n",
    "    verbose=0,                   #\n",
    "    epsilon=0.1,                 # epsilon insensitive loss function\n",
    "    random_state=None,           #\n",
    "    learning_rate='optimal',     # 'constant', 'optimal', 'invscaling', 'adaptive'\n",
    "    eta0=0.0,                    #\n",
    "    power_t=0.5,                 # eta = eta0 / pow(t, power_t) para 'invscaling'\n",
    "    early_stopping=False,        # \n",
    "    validation_fraction=0.1,     # para early_stopping\n",
    "    n_iter_no_change=5,          #\n",
    "    class_weight=None,           # \n",
    "    warm_start=False,            # ?reusa solución previa\n",
    "    average=False)               # \n",
    "\n",
    "#\n",
    "# Estimación de los parámetros óptimos\n",
    "#\n",
    "sgdClassifier.fit(X, d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 23.19819684, -12.85266256],\n",
       "       [ -2.85611246,  -2.20249112],\n",
       "       [ -3.10519567,  50.23539299]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgdClassifier.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-140.15290237,  -10.        ,   18.38237593])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgdClassifier.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgdClassifier.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\n",
    "# Gráfica de las fronteras de decisión\n",
    "#\n",
    "\n",
    "plt.scatter(X[:50,0], X[:50,1], color='red')\n",
    "plt.scatter(X[50:100,0], X[50:100,1], color='blue')\n",
    "plt.scatter(X[100:,0], X[100:,1], color='green')\n",
    "plt.gca().set_aspect('equal', adjustable='box')\n",
    "\n",
    "xlim = plt.gca().get_xlim()\n",
    "ylim = plt.gca().get_ylim()\n",
    "\n",
    "xplot = np.linspace(start=xlim[0], stop=xlim[1], num=20)\n",
    "fronteraA = (- sgdClassifier.intercept_[0] / sgdClassifier.coef_[0][1] \n",
    "             - sgdClassifier.coef_[0][0] / sgdClassifier.coef_[0][1] * xplot)\n",
    "\n",
    "fronteraB = (- sgdClassifier.intercept_[1] / sgdClassifier.coef_[1][1] \n",
    "             - sgdClassifier.coef_[1][0] / sgdClassifier.coef_[1][1] * xplot)\n",
    "\n",
    "fronteraC = (- sgdClassifier.intercept_[2] / sgdClassifier.coef_[2][1] \n",
    "             - sgdClassifier.coef_[2][0] / sgdClassifier.coef_[2][1] * xplot)\n",
    "\n",
    "plt.plot(xplot, fronteraA, color='red', linewidth=3)\n",
    "plt.plot(xplot, fronteraB, color='blue', linewidth=3)\n",
    "plt.plot(xplot, fronteraC, color='green', linewidth=3);\n",
    "\n",
    "plt.xlim(xlim)\n",
    "plt.ylim(ylim);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ejercicio.---** ¿Cómo se modifican las fronteras de decisión cuando se usa la función de pérdida de la regresión logística?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

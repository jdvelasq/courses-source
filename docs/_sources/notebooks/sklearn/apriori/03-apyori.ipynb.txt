{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apriori en Python\n",
    "===\n",
    "\n",
    "* *10 min* | Última modificación: Junio 28, 2019."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se presenta una implementación simple del algoritmo Apriori en Python, como complemento a la implementación presentada en R."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Preparación\n",
    "##\n",
    "from apyori import apriori \n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['x1', 'x2', 'x3'],\n",
       " ['x1', 'x3'],\n",
       " ['x2', 'x4'],\n",
       " ['x1', 'x2', 'x3'],\n",
       " ['x1', 'x2', 'x5'],\n",
       " ['x1', 'x2', 'x3', 'x4'],\n",
       " ['x4', 'x6'],\n",
       " ['x1', 'x2', 'x4', 'x6'],\n",
       " ['x1', 'x3', 'x4'],\n",
       " ['x1', 'x2', 'x3']]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##\n",
    "## Se preparan los datos\n",
    "##\n",
    "data = [['x1', 'x2', 'x3'], \n",
    "        ['x1', 'x3'],\n",
    "        ['x2', 'x4'],\n",
    "        ['x1', 'x2', 'x3'],\n",
    "        ['x1', 'x2', 'x5'],\n",
    "        ['x1', 'x2', 'x3', 'x4'],\n",
    "        ['x4', 'x6'],\n",
    "        ['x1', 'x2', 'x4', 'x6'],\n",
    "        ['x1', 'x3', 'x4'],\n",
    "        ['x1', 'x2', 'x3']]\n",
    "\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "transactions_rules = apriori(data, \n",
    "                            min_support=0.006, \n",
    "                            min_confidence=0.25, \n",
    "                            min_lift=1, \n",
    "                            min_length=1)  \n",
    "transactions_rules = list(transactions_rules)  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17\n"
     ]
    }
   ],
   "source": [
    "print(len(transactions_rules))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RelationRecord(items=frozenset({'x1'}), support=0.8, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x1'}), confidence=0.8, lift=1.0)])\n",
      "RelationRecord(items=frozenset({'x2'}), support=0.7, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x2'}), confidence=0.7, lift=1.0)])\n",
      "RelationRecord(items=frozenset({'x3'}), support=0.6, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x3'}), confidence=0.6, lift=1.0)])\n",
      "RelationRecord(items=frozenset({'x4'}), support=0.5, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x4'}), confidence=0.5, lift=1.0)])\n",
      "RelationRecord(items=frozenset({'x1', 'x2'}), support=0.6, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x1'}), items_add=frozenset({'x2'}), confidence=0.7499999999999999, lift=1.0714285714285714), OrderedStatistic(items_base=frozenset({'x2'}), items_add=frozenset({'x1'}), confidence=0.8571428571428572, lift=1.0714285714285714)])\n",
      "RelationRecord(items=frozenset({'x3', 'x1'}), support=0.6, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x1'}), items_add=frozenset({'x3'}), confidence=0.7499999999999999, lift=1.2499999999999998), OrderedStatistic(items_base=frozenset({'x3'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x5', 'x1'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x5'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x5', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x5'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286)])\n",
      "RelationRecord(items=frozenset({'x6', 'x4'}), support=0.2, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4'}), items_add=frozenset({'x6'}), confidence=0.4, lift=2.0), OrderedStatistic(items_base=frozenset({'x6'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0)])\n",
      "RelationRecord(items=frozenset({'x3', 'x1', 'x2'}), support=0.4, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x1', 'x2'}), items_add=frozenset({'x3'}), confidence=0.6666666666666667, lift=1.1111111111111114), OrderedStatistic(items_base=frozenset({'x3', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x5', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x5', 'x1'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286), OrderedStatistic(items_base=frozenset({'x5', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x6', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x6', 'x1'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286), OrderedStatistic(items_base=frozenset({'x6', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x4', 'x3', 'x1'}), support=0.2, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x1'}), items_add=frozenset({'x3'}), confidence=0.6666666666666667, lift=1.1111111111111114), OrderedStatistic(items_base=frozenset({'x4', 'x3'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x6', 'x4', 'x1'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x1'}), items_add=frozenset({'x6'}), confidence=0.33333333333333337, lift=1.6666666666666667), OrderedStatistic(items_base=frozenset({'x6', 'x1'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0)])\n",
      "RelationRecord(items=frozenset({'x6', 'x4', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x2'}), items_add=frozenset({'x6'}), confidence=0.33333333333333337, lift=1.6666666666666667), OrderedStatistic(items_base=frozenset({'x6', 'x2'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0)])\n",
      "RelationRecord(items=frozenset({'x4', 'x3', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x3', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "RelationRecord(items=frozenset({'x6', 'x4', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x1', 'x2'}), items_add=frozenset({'x6'}), confidence=0.5, lift=2.5), OrderedStatistic(items_base=frozenset({'x6', 'x1', 'x2'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0), OrderedStatistic(items_base=frozenset({'x6', 'x4', 'x1'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286), OrderedStatistic(items_base=frozenset({'x6', 'x4', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n"
     ]
    }
   ],
   "source": [
    "for item in transactions_rules:\n",
    "    print(item) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RelationRecord(items=frozenset({'x1'}), support=0.8, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x1'}), confidence=0.8, lift=1.0)])\n",
      "['x1']\n",
      "RelationRecord(items=frozenset({'x2'}), support=0.7, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x2'}), confidence=0.7, lift=1.0)])\n",
      "['x2']\n",
      "RelationRecord(items=frozenset({'x3'}), support=0.6, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x3'}), confidence=0.6, lift=1.0)])\n",
      "['x3']\n",
      "RelationRecord(items=frozenset({'x4'}), support=0.5, ordered_statistics=[OrderedStatistic(items_base=frozenset(), items_add=frozenset({'x4'}), confidence=0.5, lift=1.0)])\n",
      "['x4']\n",
      "RelationRecord(items=frozenset({'x1', 'x2'}), support=0.6, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x1'}), items_add=frozenset({'x2'}), confidence=0.7499999999999999, lift=1.0714285714285714), OrderedStatistic(items_base=frozenset({'x2'}), items_add=frozenset({'x1'}), confidence=0.8571428571428572, lift=1.0714285714285714)])\n",
      "['x1', 'x2']\n",
      "RelationRecord(items=frozenset({'x3', 'x1'}), support=0.6, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x1'}), items_add=frozenset({'x3'}), confidence=0.7499999999999999, lift=1.2499999999999998), OrderedStatistic(items_base=frozenset({'x3'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x3', 'x1']\n",
      "RelationRecord(items=frozenset({'x5', 'x1'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x5'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x5', 'x1']\n",
      "RelationRecord(items=frozenset({'x5', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x5'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286)])\n",
      "['x5', 'x2']\n",
      "RelationRecord(items=frozenset({'x6', 'x4'}), support=0.2, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4'}), items_add=frozenset({'x6'}), confidence=0.4, lift=2.0), OrderedStatistic(items_base=frozenset({'x6'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0)])\n",
      "['x6', 'x4']\n",
      "RelationRecord(items=frozenset({'x3', 'x1', 'x2'}), support=0.4, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x1', 'x2'}), items_add=frozenset({'x3'}), confidence=0.6666666666666667, lift=1.1111111111111114), OrderedStatistic(items_base=frozenset({'x3', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x3', 'x1', 'x2']\n",
      "RelationRecord(items=frozenset({'x5', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x5', 'x1'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286), OrderedStatistic(items_base=frozenset({'x5', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x5', 'x1', 'x2']\n",
      "RelationRecord(items=frozenset({'x6', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x6', 'x1'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286), OrderedStatistic(items_base=frozenset({'x6', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x6', 'x1', 'x2']\n",
      "RelationRecord(items=frozenset({'x4', 'x3', 'x1'}), support=0.2, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x1'}), items_add=frozenset({'x3'}), confidence=0.6666666666666667, lift=1.1111111111111114), OrderedStatistic(items_base=frozenset({'x4', 'x3'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x4', 'x3', 'x1']\n",
      "RelationRecord(items=frozenset({'x6', 'x4', 'x1'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x1'}), items_add=frozenset({'x6'}), confidence=0.33333333333333337, lift=1.6666666666666667), OrderedStatistic(items_base=frozenset({'x6', 'x1'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0)])\n",
      "['x6', 'x4', 'x1']\n",
      "RelationRecord(items=frozenset({'x6', 'x4', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x2'}), items_add=frozenset({'x6'}), confidence=0.33333333333333337, lift=1.6666666666666667), OrderedStatistic(items_base=frozenset({'x6', 'x2'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0)])\n",
      "['x6', 'x4', 'x2']\n",
      "RelationRecord(items=frozenset({'x4', 'x3', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x3', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x4', 'x3', 'x1', 'x2']\n",
      "RelationRecord(items=frozenset({'x6', 'x4', 'x1', 'x2'}), support=0.1, ordered_statistics=[OrderedStatistic(items_base=frozenset({'x4', 'x1', 'x2'}), items_add=frozenset({'x6'}), confidence=0.5, lift=2.5), OrderedStatistic(items_base=frozenset({'x6', 'x1', 'x2'}), items_add=frozenset({'x4'}), confidence=1.0, lift=2.0), OrderedStatistic(items_base=frozenset({'x6', 'x4', 'x1'}), items_add=frozenset({'x2'}), confidence=1.0, lift=1.4285714285714286), OrderedStatistic(items_base=frozenset({'x6', 'x4', 'x2'}), items_add=frozenset({'x1'}), confidence=1.0, lift=1.25)])\n",
      "['x6', 'x4', 'x1', 'x2']\n"
     ]
    }
   ],
   "source": [
    "for item in transactions_rules:\n",
    "    pair = item[0] \n",
    "    items = [x for x in pair]\n",
    "    print(item)\n",
    "    print(items)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x1, x2, x3\n",
      "x1, x3\n",
      "x2, x4\n",
      "x1, x2, x3\n",
      "x1, x2, x5\n",
      "x1, x2, x3, x4\n",
      "x4, x6\n",
      "x1, x2, x4, x6\n",
      "x1, x3, x4\n",
      "x1, x2, x3"
     ]
    }
   ],
   "source": [
    "##\n",
    "## arules lee un archivo en formato CSV.\n",
    "## Se crea un archivo con los datos del \n",
    "## problema planteado\n",
    "##\n",
    "data <- paste(\n",
    "  \"x1, x2, x3\", \n",
    "  \"x1, x3\",\n",
    "  \"x2, x4\",\n",
    "  \"x1, x2, x3\",\n",
    "  \"x1, x2, x5\",\n",
    "  \"x1, x2, x3, x4\",\n",
    "  \"x4, x6\",\n",
    "  \"x1, x2, x4, x6\",\n",
    "  \"x1, x3, x4\",\n",
    "  \"x1, x2, x3\", \n",
    "  sep=\"\\n\")\n",
    "\n",
    "## Se imprime en pantalla para verificar\n",
    "cat(data)\n",
    "\n",
    "## Se escribe el archivo en disco duro\n",
    "write(data, file = \"data/apriori.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objetivos de aprendizaje"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Al finalizar este tutorial, usted estará en capacidad de:\n",
    "\n",
    "* Explicar que es un conjunto de ítems.\n",
    "\n",
    "\n",
    "* Explicar que es una regla de asociación y cómo se aplica en sistemas de recomendación.\n",
    "\n",
    "\n",
    "* Describir las componentes del algoritmo Apriori.\n",
    "\n",
    "\n",
    "* Explicar los conceptos de *lift*, *support* y *confidence*.\n",
    "\n",
    "\n",
    "* Encontrar a mano las reglas de asociación para un conjunto pequeño de transacciones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema real"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Un problema típico de los retailers es poder recomendar productos afines a sus compradores basados en el histórico general de las ventas. Estas recomendaciones tienen como fin sugerirle al usuario productos que podría haber olvidado y que usualmente se llevan juntos, o nuevos productos sustitutos que reemplazarían productos ya posicionados. Esta recomendación se basa en el histórico general de la tienda (productos que todas las personas usualmente llevan juntos) y no en las preferencias individuales de los clientes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema en términos de los datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para ejemplificar el proceso de construcción de las reglas de inducción, se tiene un conjunto ficticio de 10 transacciones realizadas sobre seis posibles ítems ($x_1, ..., x_6)$, donde cada fila representa una transacción:\n",
    "\n",
    "\n",
    "     #  Productos\n",
    "    --------------------\n",
    "     1  x1, x2, x3\n",
    "     2  x1, x3\n",
    "     3  x2, x4\n",
    "     4  x1, x2, x3\n",
    "     5  x1, x2, x5\n",
    "     6  x1, x2, x3, x4\n",
    "     7  x4, x6\n",
    "     8  x1, x2, x4, x6\n",
    "     9  x1, x3, x4\n",
    "    10  x1, x2, x3\n",
    "   \n",
    "\n",
    "El problema consiste en derivar un conjunto de reglas de asociación que permita recomenda un grupo de productos a partir de los productos que ya seleccionó el cliente. Por ejemplo, si un cliente compra $x_1$ y $x_3$, ¿qué producto o productos se le deben recomendar?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "## Solución"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transacción"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Una **transacción** se representa a través del conjunto de ítems comprados en ella. Así, una transacción con cuatro ítems se representa como:\n",
    "\n",
    "$$\\{x_1, x_2, x_3, x_4 \\}$$\n",
    "\n",
    "El problema descrito equivale a determinar los productos $x_i$, con $x_i \\notin \\{x_1, x_2, x_3, x_4 \\}$, con mayor probabilidad de ser comprados sabiendo que el cliente ya seleccionó $x_1$, $x_2$, $x_3$ y $x_4$. Dicho de otra forma, se deben computar las probabilidades condicionales $\\text{Pr}(x_i \\, | \\,  x_1, x_2, x_3, x_4)$ y recomendar los $N$ productos $x_i$ con mayor probabilidad condicional de compra. En este problema se asume que SI existe una dependencia entre la compra de un producto y otro; si esta dependencia no existe, no tiene sentido construir el sistema de recomendación."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regla de asociación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De esta forma, el objetivo del sistema de recomendación es construir una **regla de asociación** de la forma:\n",
    "\n",
    "$$\\{x_2, x_3, x_4 \\} \\rightarrow x_1$$\n",
    "\n",
    "la cual indica que cuando se compran $x_2$, $x_3$ y $x_4$ también se compra (implica) $x_1$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Es posible evaluar todas las posibles reglas por fuerza bruta (enumeración). Para el caso anterior, las reglas podrían ser: $\\{x_2\\} \\rightarrow x_1$, $\\{x_3\\} \\rightarrow x_1$, $\\{x_4\\} \\rightarrow x_1$,  $\\{x_1\\} \\rightarrow x_2$, $\\{x_3\\} \\rightarrow x_2$, ..., \n",
    "$\\{x_2, x_3\\} \\rightarrow x_1$, $...$, $\\{x_1, x_2\\} \\rightarrow x_4$ y así sucesivamente, hasta construir todas las permutaciones posibles. Sin embargo, esta solución resulta imposible en términos prácticos debido a que la cantidad de reglas crece exponencialmente."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Ejercicio.--** ¿Cuántas reglas posibles hay para el caso anterior?\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Algoritmo Apriori"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El algoritmo **Apriori** se basa en evaluar solamente las reglas que tienen una frecuencia alta (mayor probabilidad). El algoritmo se basa en la siguiente heurística: para que el conjunto $\\{x_1, x_2\\}$ sea frecuente (que tenga una probabilidad alta), los ítems $x_1$ y $x_2$ deben ser frecuentes; es decir, si $x_1$ o $x_2$ son infrecuentes, su combinación no es evaluada.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para medir la **importancia** de una regla se usa el soporte y la confianza. Si una regla de asocación se escribe como \n",
    "\n",
    "$$X \\rightarrow Y$$\n",
    "\n",
    "el soporte es la proporción de veces que $X$ aparece respecto al total de transacciones; nótese que acá se está hablando explícitamente de probabilidad. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La **confianza** se define como:\n",
    "\n",
    "$$\\text{confidence}(X \\rightarrow Y) = \\frac{\\text{support}(X, Y)}{\\text{support}(X)} $$\n",
    "\n",
    "la cual se interpreta como la cantidad de veces en que la presencia de $X$ resulta en la presencia de $Y$. Es decir, ya que se dio $X$ que tan probable es que se de $Y$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Actividad.--** Responda la siguiente pregunta: ¿Es verdad que $\\text{confidence}(X \\rightarrow Y) = \\text{confidence}(Y \\rightarrow X)$?\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El algoritmo Apriori opera en dos fases: En la primera fase se identifican todos los conjuntos de ítems que cumplen con el soporte mínimo requerido (o probabilidad mínima de compra). En la segunda fase, con los ítems identificados en la fase uno, se crean reglas que cumplen con la confianza mínima requerida."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En la **primera fase**, se procede de forma constructiva de la siguiente forma (explícitamente se está calculado probabilidad):\n",
    "\n",
    "* Se calcula el soporte de cada ítem y se seleccionan aquellos ítems que cumplen con el soporte mínimo requerido.\n",
    "\n",
    "\n",
    "* Se forman todos las conjuntos (combinaciones) de dos ítems. Sólo se consideran combinaciones de dos ítems que contengan ítems que cumplen el soporte mínimo requerido. Se seleccionan aquellas combinaciones de dos ítems que cumplen con el soporte mínimo requerido.\n",
    "\n",
    "\n",
    "* Se forman todos los conjuntos de tres ítems. No se consideran combinaciones que contengan conjuntos no frecuentes de dos ítems. Es decir, si la combinación {$x_1$, $x_4$} no se frecuente (no cumple con el soporte mínimo requerido), entonces no se consideran combinaciones como {$x_1$, $x_3$, $x_4$} o {$x_1$, $x_2$, $x_4$}.\n",
    "\n",
    "\n",
    "* Se continua con las combinaciones de cuatro ítems y se seleccionan aquellas que cumplan con el soporte mínimo requerido. El algoritmo se detiene cuando ya no hay combinaciones de ítems que cumpan con el soporte mínimo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "**Actividad.--** Calcule el soporte para $x_1$, ..., $x_6$, esto es, la probabilidad de que $x_i$ aparezca en una transacción. Si el soporte mínimo requerido es del 40%, ¿cuáles ítems debe seleccionarse?\n",
    "\n",
    "         X   support   seleccionado\n",
    "     --------------------------------\n",
    "        x1         ?              ?\n",
    "        x2      7/10             Si\n",
    "        x3         ?              ?\n",
    "        x4         ?              ?\n",
    "        x5         ?              ?\n",
    "        x6      2/10             No\n",
    "\n",
    "\n",
    "**Actividad.--** Cuáles las combinaciones de dos ítems que deben ser consideradas de acuerdo con el resultado del ejercicio anterior? Cúales cumplen con un soporte mínimo del 40%?\n",
    "\n",
    "              X   support   seleccionado\n",
    "     -------------------------------------\n",
    "       {x1, x2}      6/10             Si\n",
    "              ?         ?              ?\n",
    "              ?         ?              ?\n",
    "              ?         ?              ?\n",
    "       {x2, x4}      3/10             No\n",
    "              ?         ?              ?\n",
    "               \n",
    "\n",
    "**Actividad.--** Cúales combinaciones de tres ítems pueden considerarse y cuáles cumplen con el soporte mínimo requerido?\n",
    "\n",
    "                X   support   seleccionado\n",
    "     ---------------------------------------\n",
    "     {x1, x2, x3}      4/10             Si\n",
    "        {?, ?, ?}         ?              ?\n",
    "        {?, ?, ?}         ?              ?\n",
    "\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En la **segunda fase**, para todas las combinaciones de 2, 3, ... ítems, se generan todas las reglas posibles y se evalúa su confianza. Se seleccionan aquellas que cumplen con la confianza mínima requerida. Si la combinación {$x_1$, $x_2$} cumplio con el soporte mínimo, entonces se consideran las reglas {$x_1$} $\\to$ {$x_2$} y {$x_2$} $\\to$ {$x_1$}. Nótese que es posible considerar reglas con varios elementos en el consecuente como por ejemplo {$x_1$} $\\to$ {$x_2$, $x_3$}."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El *lift* de una regla mide la importancia de una regla en relación a la tasa típica de compra, dado que se sabe que un ítem o un conjunto de ítems han sido comprados.\n",
    "\n",
    "$$\\text{lift}(X \\rightarrow Y) = \\frac{\\text{confidence}(X, Y)}{\\text{support}(Y)} $$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "**Actividad.--** Para todas las combinaciones que cumplen con el soporte mínimo requerido, forme las correspodientes reglas y cómpute la confianza y el lift. Si la confianza mínima es del 70%, ¿cuáles reglas deben ser seleccionadas?\n",
    "\n",
    "\n",
    "     Combinación    Reglas           Confianza   Lift  Seleccionada\n",
    "    ----------------------------------------------------------------\n",
    "     {x1, x2}       {x1}     -> {x2}       75%      ?            Si\n",
    "                    {x2}     -> {x1}       86%      ?             ?\n",
    "    ----------------------------------------------------------------\n",
    "     {?, x3}        {?}      -> {?}          ?      ?             ?\n",
    "                    {x3}     -> {?}          ?      ?             ?\n",
    "    ----------------------------------------------------------------\n",
    "     {x2, ?}        {?}      -> {x2}         ?      ?             ?\n",
    "                    {?}      -> {?}          ?      ?             ?\n",
    "    ----------------------------------------------------------------\n",
    "     {x1, x2, x3}   {?}      -> {?, ?}       ?      ?             ?\n",
    "                    {?}      -> {?, ?}       ?      ?             ?\n",
    "                    {x3}     -> {x1, x2}   67%      ?            No\n",
    "                    {?, x2}  -> {?}          ?      ?             ?\n",
    "                    {?, ?}   -> {x2}         ?      ?             ?\n",
    "                    {x2, x1} -> {?}          ?      ?             ?\n",
    "    ----------------------------------------------------------------\n",
    " \n",
    "\n",
    "**Actividad.--** Si un cliente compra $x_1$ y $x_3$, ¿qué producto o productos se le deben recomendar?\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solución usando el lenguaje R"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación se describen las funcionalidades del paquete `arules` del lenguaje R para la construcción de reglas de asociación."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Preparación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Se instala el paquete\n",
    "## install.packages(\"arules\")\n",
    "\n",
    "## Se carga la librería\n",
    "library(arules)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Formtao del archivo de datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x1, x2, x3\n",
      "x1, x3\n",
      "x2, x4\n",
      "x1, x2, x3\n",
      "x1, x2, x5\n",
      "x1, x2, x3, x4\n",
      "x4, x6\n",
      "x1, x2, x4, x6\n",
      "x1, x3, x4\n",
      "x1, x2, x3"
     ]
    }
   ],
   "source": [
    "##\n",
    "## arules lee un archivo en formato CSV.\n",
    "## Se crea un archivo con los datos del \n",
    "## problema planteado\n",
    "##\n",
    "data <- paste(\n",
    "  \"x1, x2, x3\", \n",
    "  \"x1, x3\",\n",
    "  \"x2, x4\",\n",
    "  \"x1, x2, x3\",\n",
    "  \"x1, x2, x5\",\n",
    "  \"x1, x2, x3, x4\",\n",
    "  \"x4, x6\",\n",
    "  \"x1, x2, x4, x6\",\n",
    "  \"x1, x3, x4\",\n",
    "  \"x1, x2, x3\", \n",
    "  sep=\"\\n\")\n",
    "\n",
    "## Se imprime en pantalla para verificar\n",
    "cat(data)\n",
    "\n",
    "## Se escribe el archivo en disco duro\n",
    "write(data, file = \"data/apriori.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lectura de las transacciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Se leen los datos\n",
    "##\n",
    "transactions <- read.transactions(\"data/apriori.csv\", sep = \",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     items        \n",
      "[1]  {x1,x2,x3}   \n",
      "[2]  {x1,x3}      \n",
      "[3]  {x2,x4}      \n",
      "[4]  {x1,x2,x3}   \n",
      "[5]  {x1,x2,x5}   \n",
      "[6]  {x1,x2,x3,x4}\n",
      "[7]  {x4,x6}      \n",
      "[8]  {x1,x2,x4,x6}\n",
      "[9]  {x1,x3,x4}   \n",
      "[10] {x1,x2,x3}   \n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Se imprimen los items por transacción\n",
    "##\n",
    "inspect(transactions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Análisis exploratorio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "transactions as itemMatrix in sparse format with\n",
       " 10 rows (elements/itemsets/transactions) and\n",
       " 6 columns (items) and a density of 0.4833333 \n",
       "\n",
       "most frequent items:\n",
       "     x1      x2      x3      x4      x6 (Other) \n",
       "      8       7       6       5       2       1 \n",
       "\n",
       "element (itemset/transaction) length distribution:\n",
       "sizes\n",
       "2 3 4 \n",
       "3 5 2 \n",
       "\n",
       "   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n",
       "   2.00    2.25    3.00    2.90    3.00    4.00 \n",
       "\n",
       "includes extended item information - examples:\n",
       "  labels\n",
       "1     x1\n",
       "2     x2\n",
       "3     x3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se obtiene la información más relevante de los datos:\n",
    "##\n",
    "##    * Número de transacciones\n",
    "##    * Número total de ítems\n",
    "##    * Número de transacciones por cantidad de ítems (y cuartiles)\n",
    "##\n",
    "summary(transactions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl class=dl-horizontal>\n",
       "\t<dt>x1</dt>\n",
       "\t\t<dd>0.8</dd>\n",
       "\t<dt>x2</dt>\n",
       "\t\t<dd>0.7</dd>\n",
       "\t<dt>x3</dt>\n",
       "\t\t<dd>0.6</dd>\n",
       "\t<dt>x4</dt>\n",
       "\t\t<dd>0.5</dd>\n",
       "\t<dt>x5</dt>\n",
       "\t\t<dd>0.1</dd>\n",
       "\t<dt>x6</dt>\n",
       "\t\t<dd>0.2</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[x1] 0.8\n",
       "\\item[x2] 0.7\n",
       "\\item[x3] 0.6\n",
       "\\item[x4] 0.5\n",
       "\\item[x5] 0.1\n",
       "\\item[x6] 0.2\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "x1\n",
       ":   0.8x2\n",
       ":   0.7x3\n",
       ":   0.6x4\n",
       ":   0.5x5\n",
       ":   0.1x6\n",
       ":   0.2\n",
       "\n"
      ],
      "text/plain": [
       " x1  x2  x3  x4  x5  x6 \n",
       "0.8 0.7 0.6 0.5 0.1 0.2 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se imprime la frequencia de compra, es decir,  \n",
    "## la frecuencia de cada ítem en el total de trasacciones\n",
    "##\n",
    "itemFrequency(transactions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAAC7lBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKystLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6Ojo7\nOzs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tMTExN\nTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1eXl5f\nX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29wcHBx\ncXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGCgoKD\ng4OEhISFhYWGhoaHh4eIiIiKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OVlZWWlpaX\nl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWmpqanp6eoqKip\nqamqqqqsrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi6urq7u7u8vLy9\nvb2+vr6/v7/AwMDBwcHDw8PExMTFxcXGxsbHx8fIyMjJycnKysrLy8vMzMzNzc3Ozs7Pz8/Q\n0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd3d3e3t7f39/g4ODh4eHi\n4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v7+/w8PDx8fHy8vLz8/P0\n9PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////8EX82AAAACXBIWXMAABJ0AAAS\ndAHeZh94AAAgAElEQVR4nO3dfZxU1Zng8dPviaCNvNgScCGAOruOgEQk0RmjMYmKiKM0BNC0\nqyAmmkDUGRYxowmZaHBkV0fi7ihvBmeig2ljNL6MDoFRZI2ihhF8C7iGMKIGaEVo7n9bVU93\n1dPYXPsUz+1bfer3/Xzovnaf6ufY9k+6qm5VuQjAIXNpbwAIASEBBggJMEBIgAFCAgwQEmCA\nkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCA\nkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCA\nkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCA\nkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCA\nkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBg45pDcffOR9i40APVnx\nIS095rMXbI/+psq5wxYbbgjoiYoOaU2Fq3bj73XHNP5lhXvScEdAD1R0SJOqmlsfqj7u7JYo\nWuXOt9wS0PMUHdLQ8Zk3493z2eOvNJjtB+iRig6pbk7mzWzXkj3+TrXZfoAeqeiQPndJ5s3F\n7s3s8ZQjzPYD9EhFh3RGn3eid/ocMS9zuKXXKYY7AnqgokP6uRtw7gC3smLa//7R0e5/WW4J\n6HmKDmn/lc5V3xx932Wc9bHlloCe5xDObHjt8a2Zt49+98qV+8y2A/RMnGsHGCAkwIBFSNvW\nrTP4KkAPZhHSIveJr/Lb5wqeONjldjzXrV4z+FcFOmcR0pLhww/4yOZqpxzsNr0rXLfiXmMk\nJ/nrSL9xew7ymUvPfrIb3fKZxP9VUb4ICTBASICBQwlp/8bmFcubN+6PX0VIKAPFh9SyYJBc\niR+8oCVuHSGhDBQd0q5TXOXoyTOvmDyq0o3bHbOQkFAGig7pejf9bTnaOtXNj1lISCgDRYc0\nbExr+2HrSSNiFhISykDRIdXOKRzProtZSEgoA0WHNGBi4XhC3JOfEBLKQNEhTa1c1n64pGJa\nzEJCQhkoOqTN9W70vKWrVi2dN8r12RyzkJBQBoq/H2nD2PazQcduiFtHSCgDh3Jmw/qFMxob\nZyxcH7+KkFAGONcOMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAAD\nhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAAD\nhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAAD\nhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAADhAQYICTAACEBBggJMEBIgAFCAgwQEmCAkAAD\nhAQYICTAACEBBggJMEBIgIGyD2nXju70QXLfZ6Sq3EPaWOm61b8k+J1Giso9pGfc7T/tRv3v\nTvA7jRQR0iPduYmBhBQoQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIk\nGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIk\nGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIk\nGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIk\nGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIk\nGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGCAkQoIBQiIkGDjUkNYtXvTgrtgVhKQQUqiK\nDunJ+e9G0R9Odxn9H4pbSEgKIYWq6JDGD2iN9o9zgy6dfaarXR+zkJAUQgpV0SENPCuKHnNn\n784cPlhxYcxCQlIIKVRFh1QzOYp+5F7KHZ/bP2YhISmEFKqiQxpwehTNdztzx1fVxiwkJIWQ\nQlV0SOfXvR2tdE/njscNjVlISAohharokB53X/xDy4j/ujGKPr7BfTdmISEphBSq4u9Hmut6\nTf9OVfWfn9bfDd0es46QFEIK1SHcIXvP0S6n4sK345YRkkJIoTqUMxv2PPLDq759/bKt8asI\nSSGkUHGuHSHBACEREgxYhLRt3bqYzxKSQkihsghpkTvwq7x13LC8zxFSQechzRjWrWYcyn9s\ndM4ipCXDhx/wkY8f+HneAkIq6DykL3z1xm701S8cyn9sdI7rSKUQ0pXduYcrCSkBhERIMEBI\nhAQDhxLS/o3NK5Y3b9wfv4qQFEIKVfEhtSwYJKcIDV7QEreOkBRCClXRIe06xVWOnjzzismj\nKt243TELCUkhpFAVHdL1bnrbuapbp7r5MQsJSSGkUBUd0rAxre2HrSeNiFlISAohharokGrn\n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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se grafica un histograma que muestra la frecuencia\n",
    "## con que se compraron ciertos items. El parámetro\n",
    "## `support`  corresponde a la frecuencia mínima que\n",
    "## deben tener un item para que sea incluído en la gráfica.\n",
    "## En este caso un item debe aparecer en 0.2 * 10 = 2\n",
    "## transacciones para ser tenido en cuenta. Nóte que no\n",
    "## aparece x5.\n",
    "##\n",
    "itemFrequencyPlot(transactions, support = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAAC9FBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWm\npqanp6eoqKipqamqqqqsrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi6\nurq7u7u8vLy9vb2+vr6/v7/AwMDBwcHDw8PExMTFxcXGxsbHx8fJycnKysrLy8vMzMzNzc3O\nzs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd3d3e3t7f39/g\n4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v7+/w8PDx8fHy\n8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////t1O1RAAAACXBIWXMA\nABJ0AAASdAHeZh94AAAgAElEQVR4nO3df3xU9Z3v8U9+t4KC/DBYcKGAP+7lVkBWxGJrtbZV\nEXGVH+WHxYsgVm2hSpdFtNriqlss3Ft3pWx35ZfFu2qxUVurWF0KFalF1LKCvwquUiq1BSII\n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\ngg==",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se obtiene la misma gráfica anterior \n",
    "## pero para los ítems más comprados.\n",
    "## La gráfica muestra que x1 es el más comprado\n",
    "## y x5 el menos comprado\n",
    "##\n",
    "itemFrequencyPlot(transactions, topN = 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Construcción del sistema de reglas de asociación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Apriori\n",
      "\n",
      "Parameter specification:\n",
      " confidence minval smax arem  aval originalSupport maxtime support minlen\n",
      "        0.8    0.1    1 none FALSE            TRUE       5     0.1      1\n",
      " maxlen target   ext\n",
      "     10  rules FALSE\n",
      "\n",
      "Algorithmic control:\n",
      " filter tree heap memopt load sort verbose\n",
      "    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n",
      "\n",
      "Absolute minimum support count: 1 \n",
      "\n",
      "set item appearances ...[0 item(s)] done [0.00s].\n",
      "set transactions ...[6 item(s), 10 transaction(s)] done [0.00s].\n",
      "sorting and recoding items ... [6 item(s)] done [0.00s].\n",
      "creating transaction tree ... done [0.00s].\n",
      "checking subsets of size 1 2 3 4 done [0.00s].\n",
      "writing ... [18 rule(s)] done [0.00s].\n",
      "creating S4 object  ... done [0.00s].\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "set of 18 rules "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## La corrida con los parámetros por defecto de la\n",
    "## función no generan reglas para los datos suministrados.\n",
    "## El valor por defecto de support es 0.1, es decir,\n",
    "## un item debe aparecer en un mínimo de 1 transacciones\n",
    "## para ser considerado.\n",
    "##\n",
    "apriori(transactions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Apriori\n",
      "\n",
      "Parameter specification:\n",
      " confidence minval smax arem  aval originalSupport maxtime support minlen\n",
      "       0.25    0.1    1 none FALSE            TRUE       5   0.006      2\n",
      " maxlen target   ext\n",
      "     10  rules FALSE\n",
      "\n",
      "Algorithmic control:\n",
      " filter tree heap memopt load sort verbose\n",
      "    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n",
      "\n",
      "Absolute minimum support count: 0 \n",
      "\n",
      "set item appearances ...[0 item(s)] done [0.00s].\n",
      "set transactions ...[6 item(s), 10 transaction(s)] done [0.00s].\n",
      "sorting and recoding items ... [6 item(s)] done [0.00s].\n",
      "creating transaction tree ... done [0.00s].\n",
      "checking subsets of size 1 2 3 4 done [0.00s].\n",
      "writing ... [48 rule(s)] done [0.00s].\n",
      "creating S4 object  ... done [0.00s].\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## El parámetro confianza representa el porcentaje mínimo\n",
    "## de veces que una regla debe ser correcta para que \n",
    "## sea considerada; esto permite eliminar reglas sin\n",
    "## sentido. El parámetro minlen indica que las reglas \n",
    "## deben contener al menos 2 items.\n",
    "##\n",
    "transactionsrules <- apriori(transactions, \n",
    "                        parameter = list(support = 0.006, \n",
    "                                         confidence = 0.25, \n",
    "                                         minlen = 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set of 48 rules "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Número de reglas generadas.\n",
    "## Se generaron 48 reglas\n",
    "##\n",
    "transactionsrules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set of 48 rules\n",
       "\n",
       "rule length distribution (lhs + rhs):sizes\n",
       " 2  3  4 \n",
       "18 22  8 \n",
       "\n",
       "   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n",
       "  2.000   2.000   3.000   2.792   3.000   4.000 \n",
       "\n",
       "summary of quality measures:\n",
       "    support         confidence          lift            count      \n",
       " Min.   :0.1000   Min.   :0.2500   Min.   :0.5000   Min.   :1.000  \n",
       " 1st Qu.:0.1000   1st Qu.:0.4821   1st Qu.:0.7143   1st Qu.:1.000  \n",
       " Median :0.1000   Median :0.6667   Median :1.0714   Median :1.000  \n",
       " Mean   :0.2104   Mean   :0.6715   Mean   :1.1288   Mean   :2.104  \n",
       " 3rd Qu.:0.3000   3rd Qu.:1.0000   3rd Qu.:1.2946   3rd Qu.:3.000  \n",
       " Max.   :0.6000   Max.   :1.0000   Max.   :2.5000   Max.   :6.000  \n",
       "\n",
       "mining info:\n",
       "         data ntransactions support confidence\n",
       " transactions            10   0.006       0.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## Se imprime un resumen de las reglas generadas.\n",
    "##\n",
    "##   * Hay 18 reglas con 2 ítems, 22 reglas con 3 ítems\n",
    "##     y así sucesivamente.\n",
    "##\n",
    "##   * Luego se imprimen los estadísticos para la cantidad\n",
    "##     de reglas por ítem\n",
    "##\n",
    "##   * Seguidamente aparece el resumen de las métricas de\n",
    "##     las reglas de asociación\n",
    "##\n",
    "summary(transactionsrules)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     lhs           rhs  support confidence lift      count\n",
      "[1]  {x5}       => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[2]  {x5}       => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[3]  {x6}       => {x4} 0.2     1.0000000  2.0000000 2    \n",
      "[4]  {x4}       => {x6} 0.2     0.4000000  2.0000000 2    \n",
      "[5]  {x6}       => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[6]  {x6}       => {x1} 0.1     0.5000000  0.6250000 1    \n",
      "[7]  {x4}       => {x3} 0.2     0.4000000  0.6666667 2    \n",
      "[8]  {x3}       => {x4} 0.2     0.3333333  0.6666667 2    \n",
      "[9]  {x4}       => {x2} 0.3     0.6000000  0.8571429 3    \n",
      "[10] {x2}       => {x4} 0.3     0.4285714  0.8571429 3    \n",
      "[11] {x4}       => {x1} 0.3     0.6000000  0.7500000 3    \n",
      "[12] {x1}       => {x4} 0.3     0.3750000  0.7500000 3    \n",
      "[13] {x3}       => {x2} 0.4     0.6666667  0.9523810 4    \n",
      "[14] {x2}       => {x3} 0.4     0.5714286  0.9523810 4    \n",
      "[15] {x3}       => {x1} 0.6     1.0000000  1.2500000 6    \n",
      "[16] {x1}       => {x3} 0.6     0.7500000  1.2500000 6    \n",
      "[17] {x2}       => {x1} 0.6     0.8571429  1.0714286 6    \n",
      "[18] {x1}       => {x2} 0.6     0.7500000  1.0714286 6    \n",
      "[19] {x2,x5}    => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[20] {x1,x5}    => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[21] {x4,x6}    => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[22] {x2,x6}    => {x4} 0.1     1.0000000  2.0000000 1    \n",
      "[23] {x2,x4}    => {x6} 0.1     0.3333333  1.6666667 1    \n",
      "[24] {x4,x6}    => {x1} 0.1     0.5000000  0.6250000 1    \n",
      "[25] {x1,x6}    => {x4} 0.1     1.0000000  2.0000000 1    \n",
      "[26] {x1,x4}    => {x6} 0.1     0.3333333  1.6666667 1    \n",
      "[27] {x2,x6}    => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[28] {x1,x6}    => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[29] {x3,x4}    => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[30] {x2,x4}    => {x3} 0.1     0.3333333  0.5555556 1    \n",
      "[31] {x2,x3}    => {x4} 0.1     0.2500000  0.5000000 1    \n",
      "[32] {x3,x4}    => {x1} 0.2     1.0000000  1.2500000 2    \n",
      "[33] {x1,x4}    => {x3} 0.2     0.6666667  1.1111111 2    \n",
      "[34] {x1,x3}    => {x4} 0.2     0.3333333  0.6666667 2    \n",
      "[35] {x2,x4}    => {x1} 0.2     0.6666667  0.8333333 2    \n",
      "[36] {x1,x4}    => {x2} 0.2     0.6666667  0.9523810 2    \n",
      "[37] {x1,x2}    => {x4} 0.2     0.3333333  0.6666667 2    \n",
      "[38] {x2,x3}    => {x1} 0.4     1.0000000  1.2500000 4    \n",
      "[39] {x1,x3}    => {x2} 0.4     0.6666667  0.9523810 4    \n",
      "[40] {x1,x2}    => {x3} 0.4     0.6666667  1.1111111 4    \n",
      "[41] {x2,x4,x6} => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[42] {x1,x4,x6} => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[43] {x1,x2,x6} => {x4} 0.1     1.0000000  2.0000000 1    \n",
      "[44] {x1,x2,x4} => {x6} 0.1     0.5000000  2.5000000 1    \n",
      "[45] {x2,x3,x4} => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[46] {x1,x3,x4} => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[47] {x1,x2,x4} => {x3} 0.1     0.5000000  0.8333333 1    \n",
      "[48] {x1,x2,x3} => {x4} 0.1     0.2500000  0.5000000 1    \n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Visualización de todas las reglas.\n",
    "##\n",
    "inspect(transactionsrules)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    lhs           rhs  support confidence lift count\n",
      "[1] {x1,x2,x4} => {x6} 0.1     0.5        2.5  1    \n",
      "[2] {x6}       => {x4} 0.2     1.0        2.0  2    \n",
      "[3] {x4}       => {x6} 0.2     0.4        2.0  2    \n",
      "[4] {x2,x6}    => {x4} 0.1     1.0        2.0  1    \n",
      "[5] {x1,x6}    => {x4} 0.1     1.0        2.0  1    \n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Se puede inspeccionar un conjunto de reglas en particular\n",
    "##\n",
    "inspect(sort(transactionsrules, by = \"lift\")[1:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     lhs           rhs  support confidence lift      count\n",
      "[1]  {x5}       => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[2]  {x5}       => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[3]  {x6}       => {x4} 0.2     1.0000000  2.0000000 2    \n",
      "[4]  {x4}       => {x6} 0.2     0.4000000  2.0000000 2    \n",
      "[5]  {x6}       => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[6]  {x6}       => {x1} 0.1     0.5000000  0.6250000 1    \n",
      "[7]  {x4}       => {x3} 0.2     0.4000000  0.6666667 2    \n",
      "[8]  {x3}       => {x4} 0.2     0.3333333  0.6666667 2    \n",
      "[9]  {x4}       => {x2} 0.3     0.6000000  0.8571429 3    \n",
      "[10] {x2}       => {x4} 0.3     0.4285714  0.8571429 3    \n",
      "[11] {x4}       => {x1} 0.3     0.6000000  0.7500000 3    \n",
      "[12] {x1}       => {x4} 0.3     0.3750000  0.7500000 3    \n",
      "[13] {x3}       => {x2} 0.4     0.6666667  0.9523810 4    \n",
      "[14] {x2}       => {x3} 0.4     0.5714286  0.9523810 4    \n",
      "[15] {x3}       => {x1} 0.6     1.0000000  1.2500000 6    \n",
      "[16] {x1}       => {x3} 0.6     0.7500000  1.2500000 6    \n",
      "[17] {x2}       => {x1} 0.6     0.8571429  1.0714286 6    \n",
      "[18] {x1}       => {x2} 0.6     0.7500000  1.0714286 6    \n",
      "[19] {x2,x5}    => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[20] {x1,x5}    => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[21] {x4,x6}    => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[22] {x2,x6}    => {x4} 0.1     1.0000000  2.0000000 1    \n",
      "[23] {x2,x4}    => {x6} 0.1     0.3333333  1.6666667 1    \n",
      "[24] {x4,x6}    => {x1} 0.1     0.5000000  0.6250000 1    \n",
      "[25] {x1,x6}    => {x4} 0.1     1.0000000  2.0000000 1    \n",
      "[26] {x1,x4}    => {x6} 0.1     0.3333333  1.6666667 1    \n",
      "[27] {x2,x6}    => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[28] {x1,x6}    => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[29] {x3,x4}    => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[30] {x2,x4}    => {x3} 0.1     0.3333333  0.5555556 1    \n",
      "[31] {x2,x3}    => {x4} 0.1     0.2500000  0.5000000 1    \n",
      "[32] {x3,x4}    => {x1} 0.2     1.0000000  1.2500000 2    \n",
      "[33] {x1,x4}    => {x3} 0.2     0.6666667  1.1111111 2    \n",
      "[34] {x1,x3}    => {x4} 0.2     0.3333333  0.6666667 2    \n",
      "[35] {x2,x4}    => {x1} 0.2     0.6666667  0.8333333 2    \n",
      "[36] {x1,x4}    => {x2} 0.2     0.6666667  0.9523810 2    \n",
      "[37] {x1,x2}    => {x4} 0.2     0.3333333  0.6666667 2    \n",
      "[38] {x2,x3}    => {x1} 0.4     1.0000000  1.2500000 4    \n",
      "[39] {x1,x3}    => {x2} 0.4     0.6666667  0.9523810 4    \n",
      "[40] {x1,x2}    => {x3} 0.4     0.6666667  1.1111111 4    \n",
      "[41] {x2,x4,x6} => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[42] {x1,x4,x6} => {x2} 0.1     1.0000000  1.4285714 1    \n",
      "[43] {x1,x2,x6} => {x4} 0.1     1.0000000  2.0000000 1    \n",
      "[44] {x1,x2,x4} => {x6} 0.1     0.5000000  2.5000000 1    \n",
      "[45] {x2,x3,x4} => {x1} 0.1     1.0000000  1.2500000 1    \n",
      "[46] {x1,x3,x4} => {x2} 0.1     0.5000000  0.7142857 1    \n",
      "[47] {x1,x2,x4} => {x3} 0.1     0.5000000  0.8333333 1    \n",
      "[48] {x1,x2,x3} => {x4} 0.1     0.2500000  0.5000000 1    \n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Se puede obtener un subconjunto de las reglas que\n",
    "## cumplen una condición particular\n",
    "##\n",
    "berryrules <- subset(transactionsrules, items %in% \"x2\")\n",
    "inspect(transactionsrules)"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "nteract": {
   "version": "0.7.1"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

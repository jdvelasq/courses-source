{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variables Nominales y Categóricas\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desea determinar a cuál clase ($A$, $B$ o $C$) pertenece un elemento, a partir de resultados previamente recolectados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se tiene un conjunto de 15 ejemplos para los cuales se tienen tres características $x_1$, $x_2$ y $x_3$ y su respectiva clase. Se desea determinar a que clase pertenece un nuevo punto con coordenadas $x_1$, $x_2$ y $x_3$.\n",
    "\n",
    "     #   x1   x2   x3    y  \n",
    "    ------------------------\n",
    "     1    a    g    h    A\n",
    "     2    a    e    i    A\n",
    "     3    a    f    h    A\n",
    "     4    d    f    j    A\n",
    "     5    d    g    j    A\n",
    "     6    b    e    i    B \n",
    "     7    b    f    i    B\n",
    "     8    b    f    i    B\n",
    "     9    c    g    h    B\n",
    "    10    c    g    h    B\n",
    "    11    a    e    i    C\n",
    "    12    b    g    j    C\n",
    "    13    c    f    j    C\n",
    "    14    c    g    h    C\n",
    "    15    c    e    i    C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metodología "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transformación de variables categóricas\n",
    "\n",
    "Para el caso propuesto, las variables de entrada son categoricas, tal que no pueden ser usadas directamente en una red neuronal o un modelo de regresión logística. Una trasformación para volverlas numéricas es la técnica one-hot-encoder. \n",
    "\n",
    "Esta transformación genera una columna por cada categoría de la variable en consideración; cada posición tiene el valor de cero para indicar que la categoría no esta presente, y el valor de uno para indicar la  presencia de dicha categoría. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se cargan los datos del problema de forma usual."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = [['a', 'g', 'h'],\n",
    "     ['a', 'e', 'i'],\n",
    "     ['a', 'f', 'h'],\n",
    "     ['d', 'f', 'j'],\n",
    "     ['d', 'g', 'j'],\n",
    "     ['b', 'e', 'i'],\n",
    "     ['b', 'f', 'i'],\n",
    "     ['b', 'f', 'i'],\n",
    "     ['c', 'g', 'h'],\n",
    "     ['c', 'g', 'h'],\n",
    "     ['a', 'e', 'i'],\n",
    "     ['b', 'g', 'j'],\n",
    "     ['c', 'f', 'j'],\n",
    "     ['c', 'g', 'h'],\n",
    "     ['c', 'e', 'i']]\n",
    "\n",
    "d = ['A', 'A', 'A', 'A', 'A', \n",
    "     'B', 'B', 'B', 'B', 'B',\n",
    "     'C', 'C', 'C', 'C', 'C']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se aplica el preprocesador a la matriz X. Ya que $x_1$ tiene cuatro valores posibles $\\{a, b, c, d\\}$, se generan cuatro columnas; para la primera columna, el valor de cada elemento indica si en el ejemplo $x_1=a$ o $x_1 \\ne a$, la segunda columna si  $x_1=b$ o $x_1 \\ne b$, y así sucesicamente. Luego se codifica $x_2$, y finalmente $x_3$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],\n",
       " [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],\n",
       " [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0],\n",
       " [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],\n",
       " [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n",
       " [0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],\n",
       " [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0],\n",
       " [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0],\n",
       " [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],\n",
       " [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],\n",
       " [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],\n",
       " [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n",
       " [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],\n",
       " [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],\n",
       " [0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0]]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "encX = OneHotEncoder()\n",
    "encX.fit(X) \n",
    "encX.transform(X).toarray().tolist()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El mismo procedimiento puede usarse para la variable de salida que codifica la clase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "[0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0.]\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1.]\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "##  Codificación de la clase\n",
    "##\n",
    "encY = OneHotEncoder()\n",
    "encY.fit(np.array(d).reshape(-1, 1)) \n",
    "d_enc = encY.transform(np.array(d).reshape(-1, 1)).toarray()\n",
    "\n",
    "print(d_enc[:,0]) ## Clase A\n",
    "print(d_enc[:,1]) ## Clase B\n",
    "print(d_enc[:,2]) ## Clase C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solución"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este caso se usará un ADALINE para realizar la clasificación."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "class AdalineClassifier:\n",
    "    \"\"\"\n",
    "    ADALINE classifier\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    learning_rate : float\n",
    "        Learning rate coefficient. Default to 0.1. \n",
    "        \n",
    "    max_iter : integer\n",
    "        The maximun number of passes over the training data (aka epochs).\n",
    "        Default to 100    \n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, learning_rate=0.00001, max_iter=100):\n",
    "        self.learning_rate = learning_rate\n",
    "        self.max_iter = max_iter\n",
    "        self.w = None\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        self.w = np.zeros(1 + len(X[0]))\n",
    "        X = [[1] + u for u in X]\n",
    "        X = np.array(X)\n",
    "        d = np.array(y)\n",
    "        history = []\n",
    "        for iter in range(self.max_iter):\n",
    "            p = np.dot(X, self.w)\n",
    "            e = d - p\n",
    "            self.w += 2 * self.learning_rate * np.sum((X.T * e).T, axis=0) \n",
    "            history.append(sum([a**2 for a in e]))\n",
    "        return history\n",
    "\n",
    "    def predict(self, X):\n",
    "        X = [[1] + u for u in X]\n",
    "        X = np.array(X)\n",
    "        y = np.dot(X, self.w)\n",
    "        return [-1 if v <= 0 else +1 for v in y]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "mA = AdalineClassifier(learning_rate=0.001, max_iter=10000)\n",
    "mB = AdalineClassifier(learning_rate=0.001, max_iter=10000)\n",
    "mC = AdalineClassifier(learning_rate=0.001, max_iter=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = d_enc[:,0].tolist()\n",
    "B = d_enc[:,1].tolist()\n",
    "C = d_enc[:,2].tolist()\n",
    "\n",
    "historyA = mA.fit(encX.transform(X).toarray().tolist(), A)\n",
    "historyB = mB.fit(encX.transform(X).toarray().tolist(), B)\n",
    "historyC = mC.fit(encX.transform(X).toarray().tolist(), C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(historyA)\n",
    "plt.plot(historyB)\n",
    "plt.plot(historyC);\n",
    "plt.legend(['A', 'B', 'C']);\n",
    "plt.xlim(0, 10000)\n",
    "plt.ylim(0, 4);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mA.predict(encX.transform(X).toarray().tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mB.predict(encX.transform(X).toarray().tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mC.predict(encX.transform(X).toarray().tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Otras transformaciones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Otras transformaciones pueden ser aplicadas a los datos; por ejemplo (ver https://scikit-learn.org/stable/modules/classes.html#module-sklearn.preprocessing):\n",
    "\n",
    "\n",
    "* Binarización.\n",
    "\n",
    "\n",
    "* Escalamiento.\n",
    "\n",
    "\n",
    "* Estandarización."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

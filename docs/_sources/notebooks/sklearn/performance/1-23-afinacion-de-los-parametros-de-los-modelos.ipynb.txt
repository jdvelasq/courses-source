{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Afinación de los parámetros de modelos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* *30 min* | Ultima modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En muchos casos, los modelos contienen diferentes hiperparámetros que controlan su configuración y la estimación de los parámetros. Por ejemplo, en el ejemplo del ajuste del polinomio, el grado $n$ es un hiperparámetro. En este tutorial, se presenta como abordar el problema cuando hay más de un hiperparámetro que debe ser ajustado."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejemplo en Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Preparación\n",
    "##\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Descripción del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se tiene un conjunto de imágenes de 8x8 de dígitos escritos a mano (datos de entrada) y el dígito al que corresponde la imágen. Se desea construir un clasificador que indique a que dígito corresponde una determinada imágen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##\n",
    "## carga el dataset\n",
    "##\n",
    "digits = datasets.load_digits()\n",
    "\n",
    "##\n",
    "## A continuación se grafican algunas imágenes y los dígitos\n",
    "## a los que corresponden.\n",
    "##\n",
    "images_and_labels = list(zip(digits.images, digits.target))\n",
    "for index, (image, label) in enumerate(images_and_labels[:12]):\n",
    "    plt.subplot(3, 4, index + 1)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    plt.title('Training: %i' % label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        89\n",
      "           1       0.97      1.00      0.98        90\n",
      "           2       0.99      0.98      0.98        92\n",
      "           3       1.00      0.99      0.99        93\n",
      "           4       1.00      1.00      1.00        76\n",
      "           5       0.99      0.98      0.99       108\n",
      "           6       0.99      1.00      0.99        89\n",
      "           7       0.99      1.00      0.99        78\n",
      "           8       1.00      0.98      0.99        92\n",
      "           9       0.99      0.99      0.99        92\n",
      "\n",
      "    accuracy                           0.99       899\n",
      "   macro avg       0.99      0.99      0.99       899\n",
      "weighted avg       0.99      0.99      0.99       899\n",
      "\n",
      " \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        89\n",
      "           1       0.97      1.00      0.98        90\n",
      "           2       0.99      0.98      0.98        92\n",
      "           3       1.00      0.99      0.99        93\n",
      "           4       1.00      1.00      1.00        76\n",
      "           5       0.99      0.98      0.99       108\n",
      "           6       0.99      1.00      0.99        89\n",
      "           7       0.99      1.00      0.99        78\n",
      "           8       1.00      0.98      0.99        92\n",
      "           9       0.99      0.99      0.99        92\n",
      "\n",
      "    accuracy                           0.99       899\n",
      "   macro avg       0.99      0.99      0.99       899\n",
      "weighted avg       0.99      0.99      0.99       899\n",
      "\n"
     ]
    }
   ],
   "source": [
    "##\n",
    "## Separa los datos. X son los pixels de las \n",
    "## imágenes; y es el dígito.\n",
    "## \n",
    "n_samples = len(digits.images)\n",
    "X = digits.images.reshape((n_samples, -1))\n",
    "y = digits.target\n",
    "\n",
    "##\n",
    "## Parte los datos en dos conjutos iguales\n",
    "##\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, \n",
    "    test_size=0.5, \n",
    "    random_state=0)\n",
    "\n",
    "##\n",
    "## Aca se usara una SVM. Dependiendo del tipo de kernel\n",
    "## cambian los parámetros que pueden ajustarse.\n",
    "##\n",
    "## La variable tuned_parameters es una lista de diccionarios\n",
    "## que contiene los valores que pueden ajustarse\n",
    "##\n",
    "tuned_parameters = [{'kernel': ['rbf'], \n",
    "                     'gamma': [1e-3, 1e-4], \n",
    "                     'C': [1, 10, 100, 1000]},\n",
    "                    {'kernel': ['linear'], \n",
    "                     'C': [1, 10, 100, 1000]}]\n",
    "\n",
    "##\n",
    "## Se definen las métricas de precisión que se usarán.\n",
    "##\n",
    "scores = ['precision', 'recall']\n",
    "\n",
    "for score in scores:\n",
    "\n",
    "    ##\n",
    "    ## Construye los clasificadores. SVC es una \n",
    "    ## máquina de vectors de soporte para clasificación.\n",
    "    ## Hay un clasificador por cada conjunto de parámetros\n",
    "    ##\n",
    "    clf = GridSearchCV(SVC(), \n",
    "                       tuned_parameters, \n",
    "                       cv=5,                       ## crossvalidation      \n",
    "                       scoring='%s_macro' % score)\n",
    "    \n",
    "    ##\n",
    "    ## entrenamiento de los clasificadores\n",
    "    ##\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    ##\n",
    "    ## La variable clf.best_params_ contiene los mejores parámetros\n",
    "    ## La variable clf.cv_results_ almacena los resultados de la corrida\n",
    "    ##\n",
    "    stds = clf.cv_results_['std_test_score']\n",
    "    \n",
    "    ##\n",
    "    ## valores real y pronosticado\n",
    "    y_true, y_pred = y_test, clf.predict(X_test)\n",
    "    print(' ')\n",
    "    print(classification_report(y_true, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejemplo en R\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The rpy2.ipython extension is already loaded. To reload it, use:\n",
      "  %reload_ext rpy2.ipython\n"
     ]
    }
   ],
   "source": [
    "%load_ext rpy2.ipython"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se procede a computar el modelo óptimo para el problema del riesgo de crédito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  model parameter                label forReg forClass probModel\n",
      "1 rpart        cp Complexity Parameter   TRUE     TRUE      TRUE\n"
     ]
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Se obtienen los parámetros ajustables del modelo\n",
    "## considerado\n",
    "##\n",
    "library(caret)\n",
    "modelLookup(\"rpart\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Error in library(C50) : there is no package called ‘C50’\n",
      "Calls: <Anonymous> -> <Anonymous> -> withVisible -> library\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Error in library(C50) : there is no package called ‘C50’\n",
      "Calls: <Anonymous> -> <Anonymous> -> withVisible -> library\n"
     ]
    }
   ],
   "source": [
    "%%R\n",
    "\n",
    "library(C50)\n",
    "\n",
    "##\n",
    "## Lectura de los datos\n",
    "##\n",
    "data <- read.csv(\"credit.csv\")\n",
    "data$default <- factor(data$default, labels=c(\"No\", \"Yes\"))\n",
    "\n",
    "\n",
    "\n",
    "##\n",
    "## La función `train` permite construir muchos modelos\n",
    "## que difieren en el conjunto de parámetros ajustables\n",
    "## requeridos para su estimación. Se usan los valores\n",
    "## por defecto que tiene `train`.\n",
    "## Note que este paso requiere mucho tiempo de cómputo.\n",
    "##\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "set.seed(300)\n",
    "m <- train(default ~ ., data = data, method = \"C5.0\")\n",
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note que en la tabla anterior, el valor del estadístico de ajuste para cada corrida es obtenido sobre 25 réplicas bootstrap para cada conjunto posible de parámetros. Los valores posibles que puede tomar cada parámetro son:\n",
    "\n",
    "\n",
    "* `model` = {rules, tree}\n",
    "\n",
    "\n",
    "* `winnow` = {TRUE, FALSE}\n",
    "\n",
    "\n",
    "* `trials` = {1, 10, 20}\n",
    "\n",
    "Entonces, 2 x 2 x 3 = 12.\n",
    "\n",
    "Este proceso es equivalente a realizar un diseño de experimentos para obtener la mejor combinación de parámetros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "Call:\n",
       "(function (x, y, trials = 1, rules = FALSE, weights = NULL, control\n",
       " \"winnow\", \"noGlobalPruning\", \"CF\", \"minCases\", \"fuzzyThreshold\",\n",
       " \"sample\", \"earlyStopping\", \"label\", \"seed\")))\n",
       "\n",
       "Classification Tree\n",
       "Number of samples: 1000 \n",
       "Number of predictors: 48 \n",
       "\n",
       "Number of boosting iterations: 20 \n",
       "Average tree size: 45.1 \n",
       "\n",
       "Non-standard options: attempt to group attributes, winnowing\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Después de identificar el mejor modelo, `train()` \n",
    "## usa el mejor conjunto de parámetros para construir \n",
    "## un modelo estimado sobre todo el conjunto de datos.\n",
    "##\n",
    "## Mejor modelo:\n",
    "##\n",
    "m$finalModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "     \n",
       "p      No Yes\n",
       "  No  676  79\n",
       "  Yes  24 221"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Pronóstico\n",
    "##\n",
    "p <- predict(m, data)\n",
    "table(p, data$default)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th scope=col>No</th><th scope=col>Yes</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><td>0.8720819 </td><td>0.12791809</td></tr>\n",
       "\t<tr><td>0.3284062 </td><td>0.67159380</td></tr>\n",
       "\t<tr><td>1.0000000 </td><td>0.00000000</td></tr>\n",
       "\t<tr><td>0.7563177 </td><td>0.24368229</td></tr>\n",
       "\t<tr><td>0.4531721 </td><td>0.54682785</td></tr>\n",
       "\t<tr><td>0.9085110 </td><td>0.09148904</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|ll}\n",
       " No & Yes\\\\\n",
       "\\hline\n",
       "\t 0.8720819  & 0.12791809\\\\\n",
       "\t 0.3284062  & 0.67159380\\\\\n",
       "\t 1.0000000  & 0.00000000\\\\\n",
       "\t 0.7563177  & 0.24368229\\\\\n",
       "\t 0.4531721  & 0.54682785\\\\\n",
       "\t 0.9085110  & 0.09148904\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "No | Yes | \n",
       "|---|---|---|---|---|---|\n",
       "| 0.8720819  | 0.12791809 | \n",
       "| 0.3284062  | 0.67159380 | \n",
       "| 1.0000000  | 0.00000000 | \n",
       "| 0.7563177  | 0.24368229 | \n",
       "| 0.4531721  | 0.54682785 | \n",
       "| 0.9085110  | 0.09148904 | \n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "  No        Yes       \n",
       "1 0.8720819 0.12791809\n",
       "2 0.3284062 0.67159380\n",
       "3 1.0000000 0.00000000\n",
       "4 0.7563177 0.24368229\n",
       "5 0.4531721 0.54682785\n",
       "6 0.9085110 0.09148904"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Probabilidades del pronóstico para la muestra de entrenamiento\n",
    "##\n",
    "head(predict(m, data, type = \"prob\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%%R\n",
    "##\n",
    "## A continuación se ejemplifica como parametrizar\n",
    "## la búsqueda realizada por train.\n",
    "##\n",
    "ctrl <- trainControl(method = \"cv\",               # cross validation\n",
    "                     number = 10,                 # número de grupos\n",
    "                     selectionFunction = \"oneSE\") # "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th scope=col>.model</th><th scope=col>.trials</th><th scope=col>.winnow</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><td>tree </td><td> 1   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td> 5   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td>10   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td>15   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td>20   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td>25   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td>30   </td><td>FALSE</td></tr>\n",
       "\t<tr><td>tree </td><td>35   </td><td>FALSE</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|lll}\n",
       " .model & .trials & .winnow\\\\\n",
       "\\hline\n",
       "\t tree  &  1    & FALSE\\\\\n",
       "\t tree  &  5    & FALSE\\\\\n",
       "\t tree  & 10    & FALSE\\\\\n",
       "\t tree  & 15    & FALSE\\\\\n",
       "\t tree  & 20    & FALSE\\\\\n",
       "\t tree  & 25    & FALSE\\\\\n",
       "\t tree  & 30    & FALSE\\\\\n",
       "\t tree  & 35    & FALSE\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       ".model | .trials | .winnow | \n",
       "|---|---|---|---|---|---|---|---|\n",
       "| tree  |  1    | FALSE | \n",
       "| tree  |  5    | FALSE | \n",
       "| tree  | 10    | FALSE | \n",
       "| tree  | 15    | FALSE | \n",
       "| tree  | 20    | FALSE | \n",
       "| tree  | 25    | FALSE | \n",
       "| tree  | 30    | FALSE | \n",
       "| tree  | 35    | FALSE | \n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "  .model .trials .winnow\n",
       "1 tree    1      FALSE  \n",
       "2 tree    5      FALSE  \n",
       "3 tree   10      FALSE  \n",
       "4 tree   15      FALSE  \n",
       "5 tree   20      FALSE  \n",
       "6 tree   25      FALSE  \n",
       "7 tree   30      FALSE  \n",
       "8 tree   35      FALSE  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Se crea una malla de valores posibles\n",
    "## para los parámetros a optimizar\n",
    "##\n",
    "grid <- expand.grid(.model = \"tree\",\n",
    "                    .trials = c(1, 5, 10, 15, 20, 25, 30, 35),\n",
    "                    .winnow = \"FALSE\")\n",
    "grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message in Ops.factor(x$winnow):\n",
      "“‘!’ not meaningful for factors”"
     ]
    },
    {
     "data": {
      "text/plain": [
       "C5.0 \n",
       "\n",
       "1000 samples\n",
       "  20 predictor\n",
       "   2 classes: 'No', 'Yes' \n",
       "\n",
       "No pre-processing\n",
       "Resampling: Cross-Validated (10 fold) \n",
       "Summary of sample sizes: 900, 900, 900, 900, 900, 900, ... \n",
       "Resampling results across tuning parameters:\n",
       "\n",
       "  trials  Accuracy  Kappa    \n",
       "   1      0.714     0.2918834\n",
       "   5      0.735     0.3401066\n",
       "  10      0.747     0.3504832\n",
       "  15      0.749     0.3642719\n",
       "  20      0.755     0.3641425\n",
       "  25      0.749     0.3521465\n",
       "  30      0.744     0.3445306\n",
       "  35      0.745     0.3517542\n",
       "\n",
       "Tuning parameter 'model' was held constant at a value of tree\n",
       "Tuning\n",
       " parameter 'winnow' was held constant at a value of FALSE\n",
       "Kappa was used to select the optimal model using  the one SE rule.\n",
       "The final values used for the model were trials = 5, model = tree and winnow\n",
       " = FALSE."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Se llama a train() con los valores \n",
    "## suministrados para la búsqueda.\n",
    "##\n",
    "set.seed(300)\n",
    "m <- train(default ~ .,         # todas las variables\n",
    "           data      = data,    # dataset\n",
    "           method    = \"C5.0\",  #\n",
    "           metric    = \"Kappa\", #\n",
    "           trControl = ctrl,    #\n",
    "           tuneGrid  = grid)    #\n",
    "m"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "nteract": {
   "version": "0.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "Taller --- Estimación de parámetros en modelos de regresión\n",
    "===\n",
    "\n",
    "* *60 min* | Ultima modificación: Marzo 11, 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Muestra de datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desea aproximar la siguiente función"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    y = [math.exp(0.15 * u + 1) if u < 5 else math.exp(0.25 * u + 1) for u in x]\n",
    "    return np.array(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "usando el modelo:\n",
    "\n",
    "$$y_p = g(x_p) = \\exp(w_0 + w_1 x_p)$$\n",
    "\n",
    "donde el subíndice $p$ representa cada uno de los puntos de la muestra de datos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para ello, se genera una muestra de 16 patrones entrada-salida."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(12345)\n",
    "x_real = np.linspace(start=0, stop=10, num=100)\n",
    "x_data = np.linspace(start=0, stop=10, num=16)\n",
    "d_data = f(x_data) + 0.3 * np.random.normal(0, 1, len(x_data)) * x_data\n",
    "\n",
    "d_real = f(x_real)\n",
    "plt.plot(x_real, d_real, '--', color='gray')\n",
    "plt.plot(x_data, d_data, 'o', color='black');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x\td\n",
      "--------------------\n",
      "0.0\t2.7183\n",
      "0.6667\t3.1\n",
      "1.3333\t3.1123\n",
      "2.0\t3.3359\n",
      "2.6667\t5.6278\n",
      "3.3333\t5.8751\n",
      "4.0\t5.0645\n",
      "4.6667\t5.8684\n",
      "5.3333\t11.5427\n",
      "6.0\t14.4261\n",
      "6.6667\t16.4063\n",
      "7.3333\t14.1504\n",
      "8.0\t20.7455\n",
      "8.6667\t24.3234\n",
      "9.3333\t31.8198\n",
      "10.0\t35.7747\n"
     ]
    }
   ],
   "source": [
    "print('x\\td')\n",
    "print('--------------------')\n",
    "for a, b in zip(x_data, d_data):\n",
    "    print(round(a, 4), round(b,4), sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problema a resolver"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Estime los parámetros del modelo que minimizan la suma de errores al cuadrado (SSE) o pérdida cuadrática:\n",
    "\n",
    "$$\\text{SSE} = \\sum_{p=1}^P (d_p - y_p)^2 = \\sum_{p=1}^P [d_p - g(x_p)]^2$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Imprima el valor óptimo de los parámetros encontrados.\n",
    "\n",
    "\n",
    "* Grafique los datos y el pronóstico del modelo ajustado."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

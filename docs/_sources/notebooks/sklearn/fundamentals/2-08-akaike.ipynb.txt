{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "Regresión lineal y criterios de información\n",
    "===\n",
    "\n",
    "* *45 min* | Ultima modificación: Marzo 22, 2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definición del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se tiene un conjunto de datos con variables independientes $x_1$, $x_2$, ..., $x_n$ y variable dependiente $y$. Se desea contruir un modelo lineal de la forma:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "y = w_0 + \\sum_{i=1}^n w_i x_i\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desean comparar modelos que contienen diferentes subconjuntos de variables explicativas en términos del dilema sesgo--varianza."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solución"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Definición matemática"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En estadística y econometría se suele usar todo el conjunto de datos disponibles para la estimación de los parámetros del modelo $w_0$, ..., $w_n$ mediante la minimización del SSE:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\text{SSE} = \\sum_{p=1}^P (d_p - y_p)^2 \n",
    "$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hay que recordar que la superficie de la función SSE es una cuadrática con un único punto de mínima global. Esto implica que independientemente de la técnica usada para la estimación de los parámetros $w_i$, siempre se llegará al mismo resultado. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Los criterios de información son aproximaciones (derivadas para modelos lineales) que permiten ponderar el ajuste del modelo a los datos y la variabilidad introducida por la compljidad del modelo. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Criterio de Akaike:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\text{AIC} = \\log( \\sigma^2 ) + 2 \\cdot \\frac{n}{P}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\text{AIC}_c = \\text{AIC} + \\frac{2(n+2)(n+3)}{P-n-1}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Criterio de Schwartz o criterio de información bayesiana:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\text{SIC} = \\log ( \\sigma^2 ) + \\log P \\cdot \\frac{n}{P}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "donde:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\sigma^2 = \\frac{1}{P} \\cdot \\text{SSE}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "y la función $\\log$ es la función logaritmo natural."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el criterio de información, la componente $\\log (\\sigma^2)$ disminuye a medida que el modelo se ajusta mejora a los datos de entrenamiento, mientras que la otra parte aumenta con la cantidad de parámetros."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cuando se comparán modelos, se selecciona aquel que tenga el menor valor del criterio."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prácticamente, todos los softwares estadísticos computan el criterio de información para el modelo de regresión lineal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Caso de aplicación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "# A continuación se genera una muestra de 200 datos, con\n",
    "# cuatro variables independientes, pero solo una explicativa\n",
    "#\n",
    "from sklearn.datasets import make_regression\n",
    "\n",
    "np.random.seed(12345)\n",
    "\n",
    "X, d = make_regression(\n",
    "    n_samples=200,\n",
    "    n_features=4,\n",
    "    n_informative=1,\n",
    "    bias=0.0,  # intercepto\n",
    "    effective_rank=None,  # numero de vectores singulares para explicar los datos\n",
    "    tail_strength=0.9,  # ? importancia relativa de las colas\n",
    "    noise=12.0,\n",
    "    shuffle=False,  # ?\n",
    "    coef=False,  # ?coeficientes de la regresion\n",
    "    random_state=12136,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\n",
    "# Grafica de la variable dependiente contra\n",
    "# la variable explicativa\n",
    "#\n",
    "plt.scatter(X[:, 0], d)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 OLS Regression Results                                \n",
      "=======================================================================================\n",
      "Dep. Variable:                      y   R-squared (uncentered):                   0.959\n",
      "Model:                            OLS   Adj. R-squared (uncentered):              0.958\n",
      "Method:                 Least Squares   F-statistic:                              1135.\n",
      "Date:                Mon, 23 Mar 2020   Prob (F-statistic):                   2.66e-134\n",
      "Time:                        02:08:17   Log-Likelihood:                         -792.79\n",
      "No. Observations:                 200   AIC:                                      1594.\n",
      "Df Residuals:                     196   BIC:                                      1607.\n",
      "Df Model:                           4                                                  \n",
      "Covariance Type:            nonrobust                                                  \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1            66.4290      0.993     66.880      0.000      64.470      68.388\n",
      "x2            -0.3213      0.932     -0.345      0.731      -2.160       1.518\n",
      "x3            -0.7500      0.993     -0.756      0.451      -2.708       1.208\n",
      "x4            -0.2424      0.980     -0.247      0.805      -2.175       1.690\n",
      "==============================================================================\n",
      "Omnibus:                        0.555   Durbin-Watson:                   1.960\n",
      "Prob(Omnibus):                  0.758   Jarque-Bera (JB):                0.626\n",
      "Skew:                          -0.123   Prob(JB):                        0.731\n",
      "Kurtosis:                       2.877   Cond. No.                         1.14\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# A continuación se estima el modelo de regresión lineal\n",
    "# con las 4 variables independientes\n",
    "#\n",
    "import statsmodels.api as sm\n",
    "\n",
    "model = sm.OLS(d, X)\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 OLS Regression Results                                \n",
      "=======================================================================================\n",
      "Dep. Variable:                      y   R-squared (uncentered):                   0.958\n",
      "Model:                            OLS   Adj. R-squared (uncentered):              0.958\n",
      "Method:                 Least Squares   F-statistic:                              4592.\n",
      "Date:                Mon, 23 Mar 2020   Prob (F-statistic):                   1.96e-139\n",
      "Time:                        02:09:29   Log-Likelihood:                         -793.15\n",
      "No. Observations:                 200   AIC:                                      1588.\n",
      "Df Residuals:                     199   BIC:                                      1592.\n",
      "Df Model:                           1                                                  \n",
      "Covariance Type:            nonrobust                                                  \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1            66.4750      0.981     67.766      0.000      64.541      68.409\n",
      "==============================================================================\n",
      "Omnibus:                        0.577   Durbin-Watson:                   1.955\n",
      "Prob(Omnibus):                  0.750   Jarque-Bera (JB):                0.638\n",
      "Skew:                          -0.126   Prob(JB):                        0.727\n",
      "Kurtosis:                       2.885   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# Modelo que titne una sola variable\n",
    "#\n",
    "model = sm.OLS(d, X[:, 0])\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note que el Akake para este último modelo es más bajo que el primero (con 4 variables), por lo que se prefiere."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La estrategia más simple para seleccionar los regresores del modelo consiste en evaluar los modelos para todas las combinaciones posibles de variables de entrada (fuerza bruta), pero en la práctica es imposible por la cantidad de modelos resultantes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Estrategia forward.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Se construyen todos los modelos posibles con una de las cuatro variables $x_1$, ..., $x_4$, y se selecciona la variable para el modelo con menor criterio de información. Por ejemplo, $x_3$.\n",
    "\n",
    "\n",
    "* Con la variable seleccionada ya fija ($x_3$), se construyen modelos con todas las combinaciones de dos variables, es decir, ($x_3$, $x_1$), ($x_3$, $x_2$) y ($x_3$, $x_4$). Se selecciona la pareja con el menor criterio de información. Por ejemplo, ($x_3$, $x_1$).\n",
    "\n",
    "\n",
    "* Se combinan las variables ya seleccionadas, con una de las variables no seleccionadas, y se continua como en el caso anterior.\n",
    "\n",
    "\n",
    "* El proceso se repite hasta que no se puedan adicionar más variables; esto es, el criterio de información obtenido para $n$ variables es inferior que el obtenido para todos los modelos con $n+1$ variables.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Estrategia backward.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Se parte de un modelo con todas las variables seleccionadas.\n",
    "\n",
    "\n",
    "* Se consideran todos los modelos resultantes al eliminar una de las variables seleccionadas. Se elimina la variable que produce el modelo con menor valor del criterio de información.\n",
    "\n",
    "\n",
    "* Se repite el proceso hasta que no quedan variables irrelevantes (no explicativas)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ejercicio.---** Aplique las dos estrategías (forward y backward) para el ejercicio propuesto."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

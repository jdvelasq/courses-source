{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Regresión Logística\n",
    "===\n",
    "\n",
    "* *45 min* | Ultima modificación: Junio 22, 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción del problema"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se desea determinar a cuál clase ($A$, $B$ o $C$) pertenece un elemento, a partir de resultados previamente recolectados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import make_blobs\n",
    "\n",
    "NPOINTS = 150\n",
    "\n",
    "X, d = make_blobs(\n",
    "    n_samples=NPOINTS, \n",
    "    n_features=2,\n",
    "    centers=3,\n",
    "    cluster_std=0.8, \n",
    "    shuffle=False,  \n",
    "    random_state=12345)\n",
    "\n",
    "plt.scatter(X[:50,0], X[:50,1], color='red')\n",
    "plt.scatter(X[50:100,0], X[50:100,1], color='blue')\n",
    "plt.scatter(X[100:,0], X[100:,1], color='green')\n",
    "plt.gca().set_aspect('equal', adjustable='box')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regresión Logística"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La solución anterior muestra los inconvenientes de abordar problemas de clasificación como problemas de regresión. Un problema similar ocurrio con la clasificación usando perceptrones bipolares. Este impase puede ser resuelto si se tiene en cuenta que un perceptrón continuo con función sigmoidea es equivalente a un modelo de regresión logística.\n",
    "\n",
    "En este caso, la ecuación del perceptrón \n",
    "\n",
    "$$y = \\sigma \\left( \\sum_{i=0}^n w_{i,k} x_{i,k} \\right)$$\n",
    "\n",
    "puede interpretarse como la probabilidad de que el punto $\\mathbf{x}_i$ pertenezca a la clase de interés."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En la regresión logística, los parámetros del modelo se estiman a través de la minimización de la función de entropía cruzada, definida como:\n",
    "\n",
    "$$ \\frac{1}{P} \\sum_i^P d_i \\cdot \\log(\\text{prob}(y_i)) + \n",
    "(1-d_i) \\cdot \\log(1- \\text{prob}(y_i))\n",
    "$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En la regresión logística se desea construir un modelo que permite determinar si un patrón ($x_1$, $x_2$) pertenece a una clase determinada o no. Ya que el ejemplo presentado contiene más de dos clases debe ser recodificado; una forma es especificar un modelo que indique si ($x_1$, $x_2$) pertenece a la clase $A$ o al resto (las clases {$A$, $B$}); y otro modelo que indique si pertenece a la clase $B$ o no. Si el patrón no pertenece ni a $A$ ni a $B$, entonces pertenece a $C$. La secuencia de decisiones descrita puede ser representada por un árbol de decisiones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A partir de este punto, el problema consiste en determinar si un patrón pertenece a una de dos clases mutuamente exclusivas y colectivamente exhaustivas (un patrón no puede pertenecer a las dos clases simultáneamente y cada patrón debe pertenecer a una clase de las dos clases posibles). Si se usa una variable indicadora $y$ que vale $1$ cuando el patrón pertenece a la clase $A$ y cero cuando no pertenece, entonces se podría plantear un modelo lineal de la forma:\n",
    "\n",
    "$$ y =\n",
    "   \\begin{cases}\n",
    "      1, & \\text{if $\\theta_0 + \\theta_1 x_1 + \\theta_2 x_2 > 0$} \\\\\n",
    "      \\\\\n",
    "      0, &\\text{en caso contrario.}\n",
    "   \\end{cases}\n",
    "$$\n",
    "\n",
    "La estimación de los parámetros del modelo de regresión en la ecuación anterior no puede realizarse usando regresión lineal.\n",
    "\n",
    "En la siguiente figura, se presenta un ejemplo con un grupo de puntos en el eje $X$ que pertenecen a una de dos clases; si $y=1$ el punto pertenece a la clase $A$ y en caso contrario a la clase $B$. Si se ajusta un modelo de regresión lineal de la forma:\n",
    "\n",
    "$$y = \\theta_0 + \\theta_1 x$$\n",
    "\n",
    "se obtiene la línea recta que aparece en dicha figura."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![assets/logreg-1.jpg](assets/logreg-1.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Como puede observarse, el modelo no permite realizar la discriminación entre las clases de cada punto. Para ello, los valores de $y$ deben limitarse al intervalo $[0, 1]$.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La función logística es definida como:\n",
    "\n",
    "$$\\sigma(u) = \\frac{1}{1+\\exp(-u)}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![assets/logreg-2.jpg](assets/logreg-2.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La regresión logística se define como:\n",
    "\n",
    "$$y = \\sigma(\\theta_0 + \\theta_1 x_1 + \\theta_2 x_2)$$\n",
    "\n",
    "La cual puede interpretarse como la probabilidad de que el punto ($x_1$, $x_2$) pertenezca a la clase $A$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Al aplicar la regresión logística al segundo ejemplo planteado se obtiene la línea roja de la figura de abajo, la cual representa la probabilidad de pertenencia de un punto a la clase $A$. Para $y$ = 0.5, hay una probabilidad del 50% de que el patrón pertenezca a la clase $A$ y 50% de que no pertenezca; este es un punto de indeterminación, de tal forma que el punto $x$ en que se da esta valor se conoce como frontera de decisión.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![assets/logreg-3.jpg](assets/logreg-3.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En la siguiente figura se presenta un problema de clasificación para tres clases diferentes. Cada línea representa la frontera de decisión entre un grupo y los demás. Si las flechas indican la probabilidad de pertenencia a un grupo, noté que hay una región de indeterminación en el centro."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![assets/logreg-4.jpg](assets/logreg-4.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solución usando Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import log_loss\n",
    "\n",
    "logisticRegression = LogisticRegression(\n",
    "    penalty='l2',            # ‘l1’, ‘l2’, ‘elasticnet’, ‘none’\n",
    "    tol=0.0001,              # stop criteria\n",
    "    C=1.0,                   # factor inverso para regularizacion (SVM)\n",
    "    fit_intercept=True,      #\n",
    "    class_weight=None,       # None, dict or ‘balanced’\n",
    "    random_state=None,       # \n",
    "    solver='lbfgs',          # 'newton-cg’, ‘lbfgs’, ‘liblinear’, ‘sag’, ‘saga’\n",
    "    max_iter=100,            #\n",
    "    multi_class='auto',      # ‘ovr’, ‘multinomial’, ‘auto’\n",
    "    verbose=0,               # \n",
    "    warm_start=False,        # ?re-usa la solución previa\n",
    "    l1_ratio=None            # Elastic-Net mixing parameter, with 0 <= l1_ratio <= 1\n",
    ")\n",
    "\n",
    "logisticRegression.fit(X, d)\n",
    "\n",
    "logisticRegression.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logisticRegression.predict([[2.5, -4.0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-2.3011144 , -0.84597237,  3.14708678])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logisticRegression.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.72852127, -0.43464882],\n",
       "       [-0.59331499, -0.4699242 ],\n",
       "       [-0.13520628,  0.90457302]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logisticRegression.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X[:50,0], X[:50,1], color='red')\n",
    "plt.scatter(X[50:100,0], X[50:100,1], color='blue')\n",
    "plt.scatter(X[100:,0], X[100:,1], color='green')\n",
    "plt.gca().set_aspect('equal', adjustable='box')\n",
    "\n",
    "xlim = plt.gca().get_xlim()\n",
    "ylim = plt.gca().get_ylim()\n",
    "\n",
    "xplot = np.linspace(start=xlim[0], stop=xlim[1], num=20)\n",
    "\n",
    "fronteraA = (- logisticRegression.intercept_[0] / logisticRegression.coef_[0][1] \n",
    "             - logisticRegression.coef_[0][0] / logisticRegression.coef_[0][1] * xplot)\n",
    "\n",
    "fronteraB = (- logisticRegression.intercept_[1] / logisticRegression.coef_[1][1] \n",
    "             - logisticRegression.coef_[1][0] / logisticRegression.coef_[1][1] * xplot)\n",
    "\n",
    "fronteraC = (- logisticRegression.intercept_[2] / logisticRegression.coef_[2][1] \n",
    "             - logisticRegression.coef_[2][0] / logisticRegression.coef_[2][1] * xplot)\n",
    "\n",
    "plt.plot(xplot, fronteraA, color='red', linewidth=3)\n",
    "plt.plot(xplot, fronteraB, color='blue', linewidth=3)\n",
    "plt.plot(xplot, fronteraC, color='green', linewidth=3);\n",
    "\n",
    "plt.xlim(xlim)\n",
    "plt.ylim(ylim);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[9.98661503e-01, 5.11632194e-05, 1.28733409e-03],\n",
       "       [9.97709742e-01, 2.43339689e-05, 2.26592371e-03],\n",
       "       [9.99853268e-01, 2.03670814e-05, 1.26364523e-04],\n",
       "       [9.98884814e-01, 4.22746463e-05, 1.07291161e-03],\n",
       "       [9.98956200e-01, 1.32743179e-05, 1.03052555e-03],\n",
       "       [9.96811239e-01, 4.76528501e-04, 2.71223203e-03],\n",
       "       [9.99789658e-01, 9.87278646e-06, 2.00468825e-04],\n",
       "       [9.97446880e-01, 9.92161954e-05, 2.45390423e-03],\n",
       "       [9.99962062e-01, 1.88831023e-06, 3.60493693e-05],\n",
       "       [9.98169070e-01, 1.04321247e-04, 1.72660864e-03]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logisticRegression.predict_proba(X)[0:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solución usando R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext rpy2.ipython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(X, columns=['x1', 'x2'])\n",
    "df['y'] = d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t150 obs. of  3 variables:\n",
      " $ x1: num  8.67 9.21 9.4 8.81 9.67 ...\n",
      " $ x2: num  -3.45 -2.68 -4.71 -3.49 -2.96 ...\n",
      " $ y : int  0 0 0 0 0 0 0 0 0 0 ...\n"
     ]
    }
   ],
   "source": [
    "%%R -i df\n",
    "str(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Actividad.--** Para los datos propuestos, estime tres regresiones logísticas que permitan determinar si un punto pertenece a un clase o al resto. Grafique los puntos y las fronteras de decisión.\n",
    "\n",
    "A continuación se utilizará el lenguaje R para realizar la actividad:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Loading required package: Matrix\n",
      "\n",
      "R[write to console]: Loading required package: foreach\n",
      "\n",
      "R[write to console]: Loaded glmnet 2.0-18\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          x1        x2 y\n",
      "144 1.402550 1.7304749 2\n",
      "145 2.434281 2.9911338 2\n",
      "146 1.045178 2.6036857 2\n",
      "147 2.752287 0.7826971 2\n",
      "148 1.051907 1.6342375 2\n",
      "149 1.658551 2.0620898 2\n"
     ]
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## se carga la librería\n",
    "##\n",
    "library(glmnet)\n",
    "\n",
    "##\n",
    "## Modelo 1.\n",
    "## A contra otros (B y C)\n",
    "##  \n",
    "df1 <- df                        ## se crea una copia del dataframe original\n",
    "df1$y <- gsub(\"A\", 1, df1$y)     ## se cambia la clase A por el número 1\n",
    "df1$y <- gsub(\"B\", 2, df1$y)     ## se cambia la clase B por el número 2\n",
    "df1$y <- gsub(\"C\", 2, df1$y)     ## se cambia la clase C por el número 2\n",
    "tail(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%R\n",
    "x <- as.matrix(df1[,c('x1','x2')])   ## se genera una matriz con las variables regresoras (x1, x2)\n",
    "y <- df1$y                           ## se crea un vector que contenga la variable de decisión (clase)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La función `gmlnet` entrena la regresión logística a partir de la iteración del modelo con diferentes lambdas, en donde trata de minimizar la suma de errores al cuadrado, por defecto. La salida sería aproximadamente 100 valores estimados de parámetros para diferentes niveles de lambda, como se muestra a continuación:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Call:  glmnet(x = x, y = y, family = \"multinomial\") \n",
      "\n",
      "      Df       %Dev    Lambda\n",
      " [1,]  0 -1.213e-15 0.4398000\n",
      " [2,]  2  8.146e-02 0.4008000\n",
      " [3,]  2  2.059e-01 0.3652000\n",
      " [4,]  2  3.081e-01 0.3327000\n",
      " [5,]  2  3.923e-01 0.3032000\n",
      " [6,]  2  4.630e-01 0.2762000\n",
      " [7,]  2  5.232e-01 0.2517000\n",
      " [8,]  2  5.750e-01 0.2293000\n",
      " [9,]  2  6.199e-01 0.2090000\n",
      "[10,]  2  6.592e-01 0.1904000\n",
      "[11,]  2  6.937e-01 0.1735000\n",
      "[12,]  2  7.242e-01 0.1581000\n",
      "[13,]  2  7.513e-01 0.1440000\n",
      "[14,]  2  7.754e-01 0.1312000\n",
      "[15,]  2  7.969e-01 0.1196000\n",
      "[16,]  2  8.161e-01 0.1089000\n",
      "[17,]  2  8.334e-01 0.0992700\n",
      "[18,]  2  8.489e-01 0.0904500\n",
      "[19,]  2  8.629e-01 0.0824200\n",
      "[20,]  2  8.755e-01 0.0750900\n",
      "[21,]  2  8.869e-01 0.0684200\n",
      "[22,]  2  8.972e-01 0.0623500\n",
      "[23,]  2  9.065e-01 0.0568100\n",
      "[24,]  2  9.149e-01 0.0517600\n",
      "[25,]  2  9.225e-01 0.0471600\n",
      "[26,]  2  9.295e-01 0.0429700\n",
      "[27,]  2  9.357e-01 0.0391500\n",
      "[28,]  2  9.415e-01 0.0356800\n",
      "[29,]  2  9.467e-01 0.0325100\n",
      "[30,]  2  9.514e-01 0.0296200\n",
      "[31,]  2  9.557e-01 0.0269900\n",
      "[32,]  2  9.596e-01 0.0245900\n",
      "[33,]  2  9.631e-01 0.0224100\n",
      "[34,]  2  9.664e-01 0.0204200\n",
      "[35,]  2  9.693e-01 0.0186000\n",
      "[36,]  2  9.720e-01 0.0169500\n",
      "[37,]  2  9.745e-01 0.0154400\n",
      "[38,]  2  9.767e-01 0.0140700\n",
      "[39,]  2  9.787e-01 0.0128200\n",
      "[40,]  2  9.806e-01 0.0116800\n",
      "[41,]  2  9.823e-01 0.0106400\n",
      "[42,]  2  9.838e-01 0.0096990\n",
      "[43,]  2  9.852e-01 0.0088370\n",
      "[44,]  2  9.865e-01 0.0080520\n",
      "[45,]  2  9.877e-01 0.0073370\n",
      "[46,]  2  9.887e-01 0.0066850\n",
      "[47,]  2  9.897e-01 0.0060910\n",
      "[48,]  2  9.906e-01 0.0055500\n",
      "[49,]  2  9.914e-01 0.0050570\n",
      "[50,]  2  9.922e-01 0.0046080\n",
      "[51,]  2  9.928e-01 0.0041980\n",
      "[52,]  2  9.935e-01 0.0038250\n",
      "[53,]  2  9.940e-01 0.0034860\n",
      "[54,]  2  9.946e-01 0.0031760\n",
      "[55,]  2  9.950e-01 0.0028940\n",
      "[56,]  2  9.955e-01 0.0026370\n",
      "[57,]  2  9.958e-01 0.0024020\n",
      "[58,]  2  9.962e-01 0.0021890\n",
      "[59,]  2  9.965e-01 0.0019950\n",
      "[60,]  2  9.968e-01 0.0018170\n",
      "[61,]  2  9.971e-01 0.0016560\n",
      "[62,]  2  9.974e-01 0.0015090\n",
      "[63,]  2  9.976e-01 0.0013750\n",
      "[64,]  2  9.978e-01 0.0012530\n",
      "[65,]  2  9.980e-01 0.0011410\n",
      "[66,]  2  9.982e-01 0.0010400\n",
      "[67,]  2  9.983e-01 0.0009476\n",
      "[68,]  2  9.985e-01 0.0008634\n",
      "[69,]  2  9.986e-01 0.0007867\n",
      "[70,]  2  9.987e-01 0.0007168\n",
      "[71,]  2  9.988e-01 0.0006531\n",
      "[72,]  2  9.989e-01 0.0005951\n",
      "[73,]  2  9.990e-01 0.0005422\n"
     ]
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## Se entra el modelo.\n",
    "##\n",
    "glm.fit <- glmnet(x, y, family = 'multinomial')\n",
    "glm.fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$`0`\n",
      "3 x 1 sparse Matrix of class \"dgCMatrix\"\n",
      "                    1\n",
      "(Intercept) -1.405481\n",
      "x1           0.504727\n",
      "x2           .       \n",
      "\n",
      "$`1`\n",
      "3 x 1 sparse Matrix of class \"dgCMatrix\"\n",
      "                     1\n",
      "(Intercept) -0.6727753\n",
      "x1          -0.1576664\n",
      "x2           .        \n",
      "\n",
      "$`2`\n",
      "3 x 1 sparse Matrix of class \"dgCMatrix\"\n",
      "                   1\n",
      "(Intercept) 2.078256\n",
      "x1          .       \n",
      "x2          1.150638\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%R\n",
    "##\n",
    "## es posible acceder a diferentes modelos para diferentes niveles de lambda\n",
    "## en este caso se escoge un nivel de 0.01\n",
    "## la salida corresponde a los parametros teta estudiados anteriormente en módulo\n",
    "##\n",
    "c <- coef(glm.fit,s =0.01)\n",
    "c"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "nteract": {
   "version": "0.7.1"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

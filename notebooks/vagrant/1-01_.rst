Creación de una máquina virtual usando Vagrant
======================================================================================================


Instalación
------------------------------------------------------------------------------------------------------

    * Descarge e instale Vagrant tal como se indica en:

    https://www.vagrantup.com/downloads


    * Descarge e instale VirtualBox tal como se indica en:

    https://www.virtualbox.org/wiki/Downloads



Creación del directorio de  trabajo
------------------------------------------------------------------------------------------------------

.. code:: bash 

    $ mkdir -p getting_started

    $ cd getting_started


Inicialize el proyecto
------------------------------------------------------------------------------------------------------

.. code:: bash 
    
    $ vagrant init

Contenido del archivo Vagrantfile
------------------------------------------------------------------------------------------------------

.. code:: bash 


    # -*- mode: ruby -*-
    # vi: set ft=ruby :

    # All Vagrant configuration is done below. The "2" in Vagrant.configure
    # configures the configuration version (we support older styles for
    # backwards compatibility). Please don't change it unless you know what
    # you're doing.
    Vagrant.configure("2") do |config|
        # The most common configuration options are documented and commented below.
        # For a complete reference, please see the online documentation at
        # https://docs.vagrantup.com.

        # Every Vagrant development environment requires a box. You can search for
        # boxes at https://vagrantcloud.com/search.
        config.vm.box = "hashicorp/bionic64"

        # Disable automatic box update checking. If you disable this, then
        # boxes will only be checked for updates when the user runs
        # `vagrant box outdated`. This is not recommended.
        # config.vm.box_check_update = false

        # Create a forwarded port mapping which allows access to a specific port
        # within the machine from a port on the host machine. In the example below,
        # accessing "localhost:8080" will access port 80 on the guest machine.
        # NOTE: This will enable public access to the opened port
        # config.vm.network "forwarded_port", guest: 80, host: 8080

        # Create a forwarded port mapping which allows access to a specific port
        # within the machine from a port on the host machine and only allow access
        # via 127.0.0.1 to disable public access
        # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

        # Create a private network, which allows host-only access to the machine
        # using a specific IP.
        # config.vm.network "private_network", ip: "192.168.33.10"

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        # config.vm.network "public_network"

        # Share an additional folder to the guest VM. The first argument is
        # the path on the host to the actual folder. The second argument is
        # the path on the guest to mount the folder. And the optional third
        # argument is a set of non-required options.
        # config.vm.synced_folder "../data", "/vagrant_data"

        # Provider-specific configuration so you can fine-tune various
        # backing providers for Vagrant. These expose provider-specific options.
        # Example for VirtualBox:
        #
        # config.vm.provider "virtualbox" do |vb|
        #   # Display the VirtualBox GUI when booting the machine
        #   vb.gui = true
        #
        #   # Customize the amount of memory on the VM:
        #   vb.memory = "1024"
        # end
        #
        # View the documentation for the provider you are using for more
        # information on available options.

        # Enable provisioning with a shell script. Additional provisioners such as
        # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
        # documentation for more information about their specific syntax and use.
        # config.vm.provision "shell", inline: <<-SHELL
        #   apt-get update
        #   apt-get install -y apache2
        # SHELL
    end


Inicie el ambiente
------------------------------------------------------------------------------------------------------

.. code:: bash 
    
        $ vagrant up
        Bringing machine 'default' up with 'virtualbox' provider...

Haga SSH a la máquina virtual
------------------------------------------------------------------------------------------------------

.. code:: bash 
    
        $ vagrant ssh
        Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-58-generic x86_64)

        * Documentation:  https://help.ubuntu.com
        * Management:     https://landscape.canonical.com
        * Support:        https://ubuntu.com/advantage

        System information as of Tue Jun 16 21:57:57 UTC 2020

        System load:  0.44              Processes:           91
        Usage of /:   2.5% of 61.80GB   Users logged in:     0
        Memory usage: 11%               IP address for eth0: 10.0.2.15
        Swap usage:   0%

        * MicroK8s gets a native Windows installer and command-line integration.

            https://ubuntu.com/blog/microk8s-installers-windows-and-macos

        0 packages can be updated.
        0 updates are security updates.


        vagrant@vagrant:~$



Salga de la máquina virtual
------------------------------------------------------------------------------------------------------

.. code:: bash 
        
            
    vagrant@vagrant:~$ logout
    Connection to 127.0.0.1 closed.

    $ vagrant halt



Destruya la máquina virtual
------------------------------------------------------------------------------------------------------

.. code:: bash 

    $ vagrant destroy
    default: Are you sure you want to destroy the 'default' VM? [y/N] y
    ==> default: Forcing shutdown of VM...
    ==> default: Destroying VM and associated drives...

Remueva la máquina virtual
------------------------------------------------------------------------------------------------------

.. code:: bash

    $ vagrant box list
    hashicorp/bionic64  (virtualbox, 1.0.282)

    $ vagrant box remove hashicorp/bionic64
    Removing box 'hashicorp/bionic64' (v1.0.282) with provider 'virtualbox'...














